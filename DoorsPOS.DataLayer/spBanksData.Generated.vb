Imports System
Imports System.Data
Imports System.Text

Imports PDSA.Common
Imports PDSA.DataLayer
Imports PDSA.DataLayer.DataClasses
Imports PDSA.Validation

'Imports DoorsPOS.WinApp

''' <summary>
''' This class calls the stored procedure spBanksData
''' This class is generated by the Haystack Code Generator for .NET.
''' You should NOT modify this class as it is intended to be re-generated.
''' </summary>
Public Class spBanksData
  Inherits PDSAStoredProcReadOnly

#Region "Constructors"
  Public Sub New()
    MyBase.New()

    _Entity = New spBanks()

    Init()
  End Sub

  Public Sub New(ByVal entity As spBanks)
    MyBase.New()

    _Entity = entity

    Init()
  End Sub

  Public Sub New(ByVal dataProvider As PDSADataProvider, _
    ByVal entity As spBanks)
    MyBase.New(dataProvider)

    _Entity = entity

    Init()
  End Sub
#End Region

#Region "Private Variables"
  Private _Entity As spBanks
#End Region

#Region "Public Properties"
  ''' <summary>
  ''' Get/Set the Entity class that will be used to get and set properties/fields for this data class.
  ''' </summary>
  Public Property Entity() As spBanks
    Get
      Return _Entity
    End Get
    Set(ByVal value As spBanks)
      _Entity = value
    End Set
  End Property
#End Region

#Region "Init Method"
  ''' <summary>
  ''' Initializes this class to a valid start state.
  ''' </summary>
  Protected Overrides Sub Init()
    ClassName = "spBanksData"
    StoredProcName = "spBanks"
    SchemaName = "dbo"

    ' Create Data Columns
    InitDataColumns()
  End Sub
#End Region

#Region "InitDataColumns Method"
  ''' <summary>
  ''' Initializes all of the Data Columns with valid data for each field in the table.
  ''' </summary>
  Protected Overrides Sub InitDataColumns()
    Dim dc As PDSADataColumn

    ' Create each data column
    dc = PDSADataColumn.CreateDataColumn(spBanksData.ColumnNames.bankid, "bankid", False, GetType(Integer), DbType.Int32)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(spBanksData.ColumnNames.bank, "bank", False, GetType(String), DbType.String)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(spBanksData.ColumnNames.accountno, "accountno", False, GetType(String), DbType.String)
    AllColumns.Add(dc)
  End Sub
#End Region

#Region "EntityDataToColumnCollection Method"
  ''' <summary>
  ''' Moves the data from the Entity class into the Columns collection
  ''' </summary>
  Protected Overrides Sub EntityDataToColumnCollection()
    If AllColumns.GetByName(spBanksData.ColumnNames.bankid).SetAsNull = False Then
      AllColumns.GetByName(spBanksData.ColumnNames.bankid).Value = Entity.bankid
    Else
      AllColumns.GetByName(spBanksData.ColumnNames.bankid).Value = 0
    End If
    
    If AllColumns.GetByName(spBanksData.ColumnNames.bank).SetAsNull = False Then
      AllColumns.GetByName(spBanksData.ColumnNames.bank).Value = Entity.bank
    Else
      AllColumns.GetByName(spBanksData.ColumnNames.bank).Value = String.Empty
    End If
    
    If AllColumns.GetByName(spBanksData.ColumnNames.accountno).SetAsNull = False Then
      AllColumns.GetByName(spBanksData.ColumnNames.accountno).Value = Entity.accountno
    Else
      AllColumns.GetByName(spBanksData.ColumnNames.accountno).Value = String.Empty
    End If
    
    End Sub
#End Region

#Region "ColumnCollectionToEntityData Method"
  ''' <summary>
  ''' Moves the data from the Columns collection into the Entity class.
  ''' </summary>
  Protected Overrides Sub ColumnCollectionToEntityData()
    If AllColumns.GetByName(spBanksData.ColumnNames.bankid).IsNull = False Then
      Entity.bankid = AllColumns.GetByName(spBanksData.ColumnNames.bankid).GetAsInteger()
    Else
      Entity.bankid = 0
    End If
    
    If AllColumns.GetByName(spBanksData.ColumnNames.bank).IsNull = False Then
      Entity.bank = AllColumns.GetByName(spBanksData.ColumnNames.bank).GetAsString()
    Else
      Entity.bank = String.Empty
    End If
    
    If AllColumns.GetByName(spBanksData.ColumnNames.accountno).IsNull = False Then
      Entity.accountno = AllColumns.GetByName(spBanksData.ColumnNames.accountno).GetAsString()
    Else
      Entity.accountno = String.Empty
    End If
    
  End Sub
#End Region

#Region "CreateEntityFromDataRow Method"
  ''' <summary>
  ''' Creates an Entity object from a DataRow object.
  ''' </summary>
  ''' <param name="dr">DataRow object with all fields from the table in it.</param>
  ''' <returns>spBanks</returns>
  Public Function CreateEntityFromDataRow(ByVal dr As DataRow) As spBanks
    Dim entity As New spBanks()

    If dr.Table.Columns.Contains(spBanksData.ColumnNames.bankid) Then
      If dr(spBanksData.ColumnNames.bankid).Equals(DBNull.Value) = False Then
        entity.bankid = Convert.ToInt32(dr(spBanksData.ColumnNames.bankid))
      End If
    End If
    If dr.Table.Columns.Contains(spBanksData.ColumnNames.bank) Then
      If dr(spBanksData.ColumnNames.bank).Equals(DBNull.Value) = False Then
        entity.bank = PDSAString.ConvertToStringTrim(dr(spBanksData.ColumnNames.bank))
      End If
    End If
    If dr.Table.Columns.Contains(spBanksData.ColumnNames.accountno) Then
      If dr(spBanksData.ColumnNames.accountno).Equals(DBNull.Value) = False Then
        entity.accountno = PDSAString.ConvertToStringTrim(dr(spBanksData.ColumnNames.accountno))
      End If
    End If
    entity.IsDirty = False

    Return entity
  End Function
#End Region

#Region "ColumnNames Class"
  ''' <summary>
  ''' Contains static string properties that represent the name of each property in the spBanks class.
  ''' This class is generated by the Haystack Code Generator for .NET.
  ''' Do not modify this class or add methods as it is intended to be able to be re-generated at any ti
  ''' </summary>
  Public Class ColumnNames
    Public Shared ReadOnly Property bankid() As String
      Get
        Return "bankid"
      End Get
    End Property
    Public Shared ReadOnly Property bank() As String
      Get
        Return "bank"
      End Get
    End Property
    Public Shared ReadOnly Property accountno() As String
      Get
        Return "accountno"
      End Get
    End Property
  End Class
#End Region
End Class

