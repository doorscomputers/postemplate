Imports System
Imports System.Data
Imports System.Text

Imports PDSA.Common
Imports PDSA.DataLayer
Imports PDSA.DataLayer.DataClasses
Imports PDSA.Validation

''' <summary>
''' This class calls the view vwPos
''' This class is generated by the Haystack Code Generator for .NET.
''' You should NOT modify this class as it is intended to be re-generated.
''' </summary>
Public Class vwPosData
  Inherits PDSADataClassReadOnly

#Region "Constructors"
  Public Sub New()
    MyBase.New()

    _Entity = New vwPos()

    Init()
  End Sub
  
  Public Sub New(ByVal dataProvider As PDSADataProvider, ByVal entity As vwPos)
    MyBase.New(dataProvider)

    _Entity = entity

    Init()
  End Sub
#End Region

#Region "Private Variables"
  Private _Entity As vwPos

  Private _WhereFilter As WhereFilters
  Private _OrderByFilter As OrderByFilters
  Private _SelectFilter As SelectFilters
  Private _RowCountFilter As RowCountFilters
#End Region

#Region "Filter Enumerations"
  ''' <summary>
  ''' Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
  ''' </summary>
  Public Enum SelectFilters
    ''' <summary>
    ''' 'All' SelectFilter
    ''' </summary>
    All
    ''' <summary>
    ''' A Custom SelectFilter
    ''' </summary>
    Custom
  End Enum

  ''' <summary>
  ''' Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
  ''' </summary>
  Public Enum WhereFilters
    ''' <summary>
    ''' No WhereFilter Selected
    ''' </summary>
    None
    ''' <summary>
    ''' A Custom WhereFilter
    ''' </summary>
    Custom
    ''' <summary>
    ''' 'barcode' WhereFilter
    ''' </summary>
    barcode
    ''' <summary>
    ''' 'Likebarcode' WhereFilter
    ''' </summary>
    Likebarcode
  End Enum

  ''' <summary>
  ''' Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
  ''' </summary>
  Public Enum OrderByFilters
    ''' <summary>
    ''' No OrderByFilter Selected
    ''' </summary>
    None
    ''' <summary>
    ''' A Custom OrderByFilter
    ''' </summary>
    Custom
    ''' <summary>
    ''' 'barcode' OrderByFilter
    ''' </summary>
    barcode
  End Enum
  ''' <summary>
  ''' Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
  ''' </summary>
  Public Enum RowCountFilters
    ''' <summary>
    ''' 'All' RowCountFilter
    ''' </summary>
    All
    Custom
  End Enum
#End Region

#Region "Public Properties"
  ''' <summary>
  ''' Get/Set the Entity class that will be used to get and set properties/fields for this data class.
  ''' </summary>
  Public Property Entity() As vwPos
    Get
      Return _Entity
    End Get
    Set(ByVal value As vwPos)
      _Entity = value
    End Set
  End Property

  ''' <summary>
  ''' Get/Set a Dynamic SQL or Stored Procedure to execute to return data.
  ''' </summary>
  Public Property SelectFilter() As SelectFilters
    Get
      Return _SelectFilter
    End Get
    Set(ByVal Value As SelectFilters)
      _SelectFilter = Value
    End Set
  End Property

  ''' <summary>
  ''' Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
  ''' </summary>
  Public Property WhereFilter() As WhereFilters
    Get
      Return _WhereFilter
    End Get
    Set(ByVal Value As WhereFilters)
      _WhereFilter = Value
    End Set
  End Property

  ''' <summary>
  ''' Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
  ''' </summary>
  Public Property OrderByFilter() As OrderByFilters
    Get
      Return _OrderByFilter
    End Get
    Set(ByVal Value As OrderByFilters)
      _OrderByFilter = Value
    End Set
  End Property
  
  ''' <summary>
  ''' Get/Set a Row Count statement to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
  ''' </summary>
  Public Property RowCountFilter() As RowCountFilters
    Get
      Return _RowCountFilter
    End Get
    Set(ByVal Value As RowCountFilters)
      _RowCountFilter = Value
    End Set
  End Property
#End Region

#Region "Init Method"
  ''' <summary>
  ''' Initializes this class to a valid start state.
  ''' </summary>
  Protected Overrides Sub Init()
    ClassName = "vwPosData"
    DBObjectName = "vwPos"
    SchemaName = "dbo"

    ' Create Data Columns
    InitDataColumns()
  End Sub
#End Region

#Region "InitDataColumns Method"
  ''' <summary>
  ''' Initializes all of the Data Columns with valid data for each field in the view.
  ''' </summary>
  Protected Overrides Sub InitDataColumns()
    Dim dc As PDSADataColumn

    ' Create each data column
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.barcode, "barcode", False, GetType(String), DbType.String)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.Items, "Items", False, GetType(String), DbType.String)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.stckid, "stckid", False, GetType(Integer), DbType.Int32)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.cost, "cost", False, GetType(Decimal), DbType.Decimal)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.qty, "qty", False, GetType(Double), DbType.Double)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.price, "price", False, GetType(Decimal), DbType.Decimal)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.detamnt, "det amnt", False, GetType(Decimal), DbType.Decimal)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.tdesc, "tdesc", False, GetType(String), DbType.String)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.waiter, "waiter", False, GetType(String), DbType.String)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.postmphdrid, "postmp hdrid", False, GetType(Integer), DbType.Int32)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.posdate, "pos date", False, GetType(Date), DbType.Date)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.custid, "custid", False, GetType(Integer), DbType.Int32)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.posamnt, "pos amnt", False, GetType(Decimal), DbType.Decimal)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.tendered, "tendered", False, GetType(Decimal), DbType.Decimal)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.Cheyns, "Cheyns", False, GetType(Decimal), DbType.Decimal)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.Sc, "Sc", False, GetType(Integer), DbType.Int32)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.totsales, "totsales", False, GetType(Decimal), DbType.Decimal)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.lessvat, "less vat", False, GetType(Decimal), DbType.Decimal)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.nov, "nov", False, GetType(Decimal), DbType.Decimal)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.lesssc, "less sc", False, GetType(Decimal), DbType.Decimal)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.vatable, "vatable", False, GetType(Decimal), DbType.Decimal)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.exempt, "exempt", False, GetType(Decimal), DbType.Decimal)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.vatamnt, "vatamnt", False, GetType(Decimal), DbType.Decimal)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.Expr2, "Expr 2", False, GetType(String), DbType.String)
    AllColumns.Add(dc)
    dc = PDSADataColumn.CreateDataColumn(vwPosData.ColumnNames.wtid, "wtid", False, GetType(Integer), DbType.Int32)
    AllColumns.Add(dc)
  End Sub
#End Region

#Region "EntityDataToColumnCollection Method"
  ''' <summary>
  ''' Moves the data from the Entity class into the Columns collection
  ''' </summary>
  Protected Overrides Sub EntityDataToColumnCollection()
    If AllColumns.GetByName(vwPosData.ColumnNames.barcode).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.barcode).Value = Entity.barcode
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.barcode).Value = String.Empty
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.Items).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.Items).Value = Entity.Items
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.Items).Value = String.Empty
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.stckid).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.stckid).Value = Entity.stckid
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.stckid).Value = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.cost).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.cost).Value = Entity.cost
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.cost).Value = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.qty).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.qty).Value = Entity.qty
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.qty).Value = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.price).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.price).Value = Entity.price
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.price).Value = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.detamnt).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.detamnt).Value = Entity.detamnt
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.detamnt).Value = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.tdesc).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.tdesc).Value = Entity.tdesc
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.tdesc).Value = String.Empty
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.waiter).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.waiter).Value = Entity.waiter
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.waiter).Value = String.Empty
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.postmphdrid).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.postmphdrid).Value = Entity.postmphdrid
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.postmphdrid).Value = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.posdate).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.posdate).Value = Entity.posdate
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.posdate).Value = DateTime.Now
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.custid).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.custid).Value = Entity.custid
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.custid).Value = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.posamnt).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.posamnt).Value = Entity.posamnt
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.posamnt).Value = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.tendered).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.tendered).Value = Entity.tendered
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.tendered).Value = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.Cheyns).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.Cheyns).Value = Entity.Cheyns
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.Cheyns).Value = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.Sc).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.Sc).Value = Entity.Sc
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.Sc).Value = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.totsales).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.totsales).Value = Entity.totsales
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.totsales).Value = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.lessvat).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.lessvat).Value = Entity.lessvat
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.lessvat).Value = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.nov).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.nov).Value = Entity.nov
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.nov).Value = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.lesssc).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.lesssc).Value = Entity.lesssc
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.lesssc).Value = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.vatable).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.vatable).Value = Entity.vatable
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.vatable).Value = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.exempt).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.exempt).Value = Entity.exempt
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.exempt).Value = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.vatamnt).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.vatamnt).Value = Entity.vatamnt
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.vatamnt).Value = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.Expr2).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.Expr2).Value = Entity.Expr2
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.Expr2).Value = String.Empty
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.wtid).SetAsNull = False Then
      AllColumns.GetByName(vwPosData.ColumnNames.wtid).Value = Entity.wtid
    Else
      AllColumns.GetByName(vwPosData.ColumnNames.wtid).Value = 0
    End If
    
  End Sub
#End Region

#Region "ColumnCollectionToEntityData Method"
  ''' <summary>
  ''' Moves the data from the Columns collection into the Entity class.
  ''' </summary>
  Protected Overrides Sub ColumnCollectionToEntityData()
    If AllColumns.GetByName(vwPosData.ColumnNames.barcode).IsNull = False Then
      Entity.barcode = AllColumns.GetByName(vwPosData.ColumnNames.barcode).GetAsString()
    Else
      Entity.barcode = String.Empty
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.Items).IsNull = False Then
      Entity.Items = AllColumns.GetByName(vwPosData.ColumnNames.Items).GetAsString()
    Else
      Entity.Items = String.Empty
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.stckid).IsNull = False Then
      Entity.stckid = AllColumns.GetByName(vwPosData.ColumnNames.stckid).GetAsInteger()
    Else
      Entity.stckid = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.cost).IsNull = False Then
      Entity.cost = AllColumns.GetByName(vwPosData.ColumnNames.cost).GetAsDecimal()
    Else
      Entity.cost = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.qty).IsNull = False Then
      Entity.qty = AllColumns.GetByName(vwPosData.ColumnNames.qty).GetAsDouble()
    Else
      Entity.qty = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.price).IsNull = False Then
      Entity.price = AllColumns.GetByName(vwPosData.ColumnNames.price).GetAsDecimal()
    Else
      Entity.price = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.detamnt).IsNull = False Then
      Entity.detamnt = AllColumns.GetByName(vwPosData.ColumnNames.detamnt).GetAsDecimal()
    Else
      Entity.detamnt = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.tdesc).IsNull = False Then
      Entity.tdesc = AllColumns.GetByName(vwPosData.ColumnNames.tdesc).GetAsString()
    Else
      Entity.tdesc = String.Empty
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.waiter).IsNull = False Then
      Entity.waiter = AllColumns.GetByName(vwPosData.ColumnNames.waiter).GetAsString()
    Else
      Entity.waiter = String.Empty
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.postmphdrid).IsNull = False Then
      Entity.postmphdrid = AllColumns.GetByName(vwPosData.ColumnNames.postmphdrid).GetAsInteger()
    Else
      Entity.postmphdrid = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.posdate).IsNull = False Then
      Entity.posdate = AllColumns.GetByName(vwPosData.ColumnNames.posdate).GetAsDate()
    Else
      Entity.posdate = DateTime.Now
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.custid).IsNull = False Then
      Entity.custid = AllColumns.GetByName(vwPosData.ColumnNames.custid).GetAsInteger()
    Else
      Entity.custid = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.posamnt).IsNull = False Then
      Entity.posamnt = AllColumns.GetByName(vwPosData.ColumnNames.posamnt).GetAsDecimal()
    Else
      Entity.posamnt = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.tendered).IsNull = False Then
      Entity.tendered = AllColumns.GetByName(vwPosData.ColumnNames.tendered).GetAsDecimal()
    Else
      Entity.tendered = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.Cheyns).IsNull = False Then
      Entity.Cheyns = AllColumns.GetByName(vwPosData.ColumnNames.Cheyns).GetAsDecimal()
    Else
      Entity.Cheyns = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.Sc).IsNull = False Then
      Entity.Sc = AllColumns.GetByName(vwPosData.ColumnNames.Sc).GetAsInteger()
    Else
      Entity.Sc = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.totsales).IsNull = False Then
      Entity.totsales = AllColumns.GetByName(vwPosData.ColumnNames.totsales).GetAsDecimal()
    Else
      Entity.totsales = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.lessvat).IsNull = False Then
      Entity.lessvat = AllColumns.GetByName(vwPosData.ColumnNames.lessvat).GetAsDecimal()
    Else
      Entity.lessvat = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.nov).IsNull = False Then
      Entity.nov = AllColumns.GetByName(vwPosData.ColumnNames.nov).GetAsDecimal()
    Else
      Entity.nov = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.lesssc).IsNull = False Then
      Entity.lesssc = AllColumns.GetByName(vwPosData.ColumnNames.lesssc).GetAsDecimal()
    Else
      Entity.lesssc = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.vatable).IsNull = False Then
      Entity.vatable = AllColumns.GetByName(vwPosData.ColumnNames.vatable).GetAsDecimal()
    Else
      Entity.vatable = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.exempt).IsNull = False Then
      Entity.exempt = AllColumns.GetByName(vwPosData.ColumnNames.exempt).GetAsDecimal()
    Else
      Entity.exempt = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.vatamnt).IsNull = False Then
      Entity.vatamnt = AllColumns.GetByName(vwPosData.ColumnNames.vatamnt).GetAsDecimal()
    Else
      Entity.vatamnt = 0
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.Expr2).IsNull = False Then
      Entity.Expr2 = AllColumns.GetByName(vwPosData.ColumnNames.Expr2).GetAsString()
    Else
      Entity.Expr2 = String.Empty
    End If
    
    If AllColumns.GetByName(vwPosData.ColumnNames.wtid).IsNull = False Then
      Entity.wtid = AllColumns.GetByName(vwPosData.ColumnNames.wtid).GetAsInteger()
    Else
      Entity.wtid = 0
    End If
    
  End Sub
#End Region

#Region "CreateEntityFromDataRow Method"
  ''' <summary>
  ''' Creates an Entity object from a DataRow object.
  ''' </summary>
  ''' <param name="dr">DataRow object with all fields from the view in it.</param>
  ''' <returns>vwPos</returns>
  Public Function CreateEntityFromDataRow(ByVal dr As DataRow) As vwPos
    Dim entity As New vwPos()

    If dr.Table.Columns.Contains(vwPosData.ColumnNames.barcode) Then
      If dr(vwPosData.ColumnNames.barcode).Equals(DBNull.Value) = False Then
        entity.barcode = PDSAString.ConvertToStringTrim(dr(vwPosData.ColumnNames.barcode))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.Items) Then
      If dr(vwPosData.ColumnNames.Items).Equals(DBNull.Value) = False Then
        entity.Items = PDSAString.ConvertToStringTrim(dr(vwPosData.ColumnNames.Items))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.stckid) Then
      If dr(vwPosData.ColumnNames.stckid).Equals(DBNull.Value) = False Then
        entity.stckid = Convert.ToInt32(dr(vwPosData.ColumnNames.stckid))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.cost) Then
      If dr(vwPosData.ColumnNames.cost).Equals(DBNull.Value) = False Then
        entity.cost = Convert.ToDecimal(dr(vwPosData.ColumnNames.cost))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.qty) Then
      If dr(vwPosData.ColumnNames.qty).Equals(DBNull.Value) = False Then
        entity.qty = Convert.ToDouble(dr(vwPosData.ColumnNames.qty))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.price) Then
      If dr(vwPosData.ColumnNames.price).Equals(DBNull.Value) = False Then
        entity.price = Convert.ToDecimal(dr(vwPosData.ColumnNames.price))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.detamnt) Then
      If dr(vwPosData.ColumnNames.detamnt).Equals(DBNull.Value) = False Then
        entity.detamnt = Convert.ToDecimal(dr(vwPosData.ColumnNames.detamnt))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.tdesc) Then
      If dr(vwPosData.ColumnNames.tdesc).Equals(DBNull.Value) = False Then
        entity.tdesc = PDSAString.ConvertToStringTrim(dr(vwPosData.ColumnNames.tdesc))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.waiter) Then
      If dr(vwPosData.ColumnNames.waiter).Equals(DBNull.Value) = False Then
        entity.waiter = PDSAString.ConvertToStringTrim(dr(vwPosData.ColumnNames.waiter))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.postmphdrid) Then
      If dr(vwPosData.ColumnNames.postmphdrid).Equals(DBNull.Value) = False Then
        entity.postmphdrid = Convert.ToInt32(dr(vwPosData.ColumnNames.postmphdrid))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.posdate) Then
      If dr(vwPosData.ColumnNames.posdate).Equals(DBNull.Value) = False Then
        entity.posdate = Convert.ToDateTime(dr(vwPosData.ColumnNames.posdate))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.custid) Then
      If dr(vwPosData.ColumnNames.custid).Equals(DBNull.Value) = False Then
        entity.custid = Convert.ToInt32(dr(vwPosData.ColumnNames.custid))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.posamnt) Then
      If dr(vwPosData.ColumnNames.posamnt).Equals(DBNull.Value) = False Then
        entity.posamnt = Convert.ToDecimal(dr(vwPosData.ColumnNames.posamnt))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.tendered) Then
      If dr(vwPosData.ColumnNames.tendered).Equals(DBNull.Value) = False Then
        entity.tendered = Convert.ToDecimal(dr(vwPosData.ColumnNames.tendered))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.Cheyns) Then
      If dr(vwPosData.ColumnNames.Cheyns).Equals(DBNull.Value) = False Then
        entity.Cheyns = Convert.ToDecimal(dr(vwPosData.ColumnNames.Cheyns))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.Sc) Then
      If dr(vwPosData.ColumnNames.Sc).Equals(DBNull.Value) = False Then
        entity.Sc = Convert.ToInt32(dr(vwPosData.ColumnNames.Sc))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.totsales) Then
      If dr(vwPosData.ColumnNames.totsales).Equals(DBNull.Value) = False Then
        entity.totsales = Convert.ToDecimal(dr(vwPosData.ColumnNames.totsales))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.lessvat) Then
      If dr(vwPosData.ColumnNames.lessvat).Equals(DBNull.Value) = False Then
        entity.lessvat = Convert.ToDecimal(dr(vwPosData.ColumnNames.lessvat))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.nov) Then
      If dr(vwPosData.ColumnNames.nov).Equals(DBNull.Value) = False Then
        entity.nov = Convert.ToDecimal(dr(vwPosData.ColumnNames.nov))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.lesssc) Then
      If dr(vwPosData.ColumnNames.lesssc).Equals(DBNull.Value) = False Then
        entity.lesssc = Convert.ToDecimal(dr(vwPosData.ColumnNames.lesssc))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.vatable) Then
      If dr(vwPosData.ColumnNames.vatable).Equals(DBNull.Value) = False Then
        entity.vatable = Convert.ToDecimal(dr(vwPosData.ColumnNames.vatable))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.exempt) Then
      If dr(vwPosData.ColumnNames.exempt).Equals(DBNull.Value) = False Then
        entity.exempt = Convert.ToDecimal(dr(vwPosData.ColumnNames.exempt))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.vatamnt) Then
      If dr(vwPosData.ColumnNames.vatamnt).Equals(DBNull.Value) = False Then
        entity.vatamnt = Convert.ToDecimal(dr(vwPosData.ColumnNames.vatamnt))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.Expr2) Then
      If dr(vwPosData.ColumnNames.Expr2).Equals(DBNull.Value) = False Then
        entity.Expr2 = PDSAString.ConvertToStringTrim(dr(vwPosData.ColumnNames.Expr2))
      End If
    End If
    If dr.Table.Columns.Contains(vwPosData.ColumnNames.wtid) Then
      If dr(vwPosData.ColumnNames.wtid).Equals(DBNull.Value) = False Then
        entity.wtid = Convert.ToInt32(dr(vwPosData.ColumnNames.wtid))
      End If
    End If
    entity.IsDirty = False

    Return entity
  End Function
#End Region

#Region "SelectSQL Method"
  ''' <summary>
  ''' Builds the SQL for the SELECT statement based on the SelectFilter property.
  ''' </summary>
  ''' <returns>string</returns>
  Public Overrides Function SelectSQL() As String
    Dim sb As StringBuilder = New StringBuilder(SB_INIT_LENGTH)

    Select Case SelectFilter
      Case SelectFilters.All
        sb.Append(" SELECT barcode, Items, stckid, cost, price, qty, tdesc, waiter, postmp_hdrid, pos_date, custid, pos_amnt, tendered, Cheyns, Sc, totsales, less_vat, nov, less_sc, vatable, exempt, vatamnt, Expr2, wtid FROM dbo.vwPos")


      Case SelectFilters.Custom
        sb.Append(SelectCustom)

    End Select

    SQL = sb.ToString()

    Return SQL
  End Function
#End Region

#Region "RowCountSQL Method"
  ''' <summary>
  ''' Builds the SELECT Count(*) SQL that will count the number of rows.
  ''' </summary>
  ''' <returns>string</returns>
  Public Overrides Function RowCountSQL() As String
    Dim sb As StringBuilder = New StringBuilder(SB_INIT_LENGTH)

    Select Case RowCountFilter
      Case RowCountFilters.All
        sb.Append(" SELECT Count(*) As NumRecs FROM dbo.vwPos")


      Case RowCountFilters.Custom
        sb.Append(RowCountCustom)

    End Select

    sb.Append(WhereClauseSQL())

    SQL = sb.ToString()

    Return SQL
  End Function
#End Region

#Region "WhereClauseSQL Method"
  ''' <summary>
  ''' Builds the WHERE clause to be used in combination with a SELECT statement.
  ''' </summary>
  ''' <returns>string</returns>
  Public Overrides Function WhereClauseSQL() As String
    Dim sb As StringBuilder = New StringBuilder(SB_INIT_LENGTH)

    Select Case WhereFilter
      Case WhereFilters.Custom
        sb.Append(WhereCustom)

      Case WhereFilters.None
        ' Do nothing

      Case WhereFilters.barcode
        sb.Append(" WHERE barcode = @barcode")

        
      Case WhereFilters.Likebarcode
        sb.Append(" WHERE barcode LIKE @barcode")

        
    End Select

    Return sb.ToString()
  End Function
#End Region

#Region "WhereClauseFillInParameters Method"
  ''' <summary>
  ''' Builds the CommandObject.Parameters collection for any WHERE clause parameters.
  ''' </summary>
  Protected Overrides Sub WhereClauseFillInParameters()
    Select Case WhereFilter
      Case WhereFilters.barcode
        CommandObject.Parameters.Add(DataProvider.CreateParameter("barcode", DbType.String, Entity.barcode))
      Case WhereFilters.Likebarcode
        CommandObject.Parameters.Add(DataProvider.CreateParameter("barcode", DbType.String, Entity.barcode))

    End Select
  End Sub
#End Region

#Region "OrderByClauseSQL Method"
  ''' <summary>
  ''' Builds the ORDER BY clause to be used in combination with a SELECT statement.
  ''' </summary>
  ''' <returns>string</returns>
  Public Overrides Function OrderByClauseSQL() As String
    Dim sb As StringBuilder = New StringBuilder(SB_INIT_LENGTH)

    Select Case OrderByFilter
      Case OrderByFilters.None
        '  Do Nothing

      Case OrderByFilters.Custom
        sb.Append(OrderByCustom)

      Case OrderByFilters.barcode
          sb.Append(" ORDER BY barcode")


    End Select

    Return sb.ToString()
  End Function
#End Region

#Region "ColumnNames Class"
  ''' <summary>
  ''' Contains static string properties that represent the name of each property in the Product class.
  ''' This class is generated by the Haystack Code Generator for .NET.
  ''' Do not modify this class or add methods as it is intended to be able to be re-generated at any ti
  ''' </summary>
  Public Class ColumnNames
    ''' <summary>
    ''' Returns 'barcode'
    ''' </summary>
    Public Shared ReadOnly Property barcode() As String
      Get
        Return "barcode"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'Items'
    ''' </summary>
    Public Shared ReadOnly Property Items() As String
      Get
        Return "Items"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'stckid'
    ''' </summary>
    Public Shared ReadOnly Property stckid() As String
      Get
        Return "stckid"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'cost'
    ''' </summary>
    Public Shared ReadOnly Property cost() As String
      Get
        Return "cost"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'qty'
    ''' </summary>
    Public Shared ReadOnly Property qty() As String
      Get
        Return "qty"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'price'
    ''' </summary>
    Public Shared ReadOnly Property price() As String
      Get
        Return "price"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'det_amnt'
    ''' </summary>
    Public Shared ReadOnly Property detamnt() As String
      Get
        Return "det_amnt"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'tdesc'
    ''' </summary>
    Public Shared ReadOnly Property tdesc() As String
      Get
        Return "tdesc"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'waiter'
    ''' </summary>
    Public Shared ReadOnly Property waiter() As String
      Get
        Return "waiter"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'postmp_hdrid'
    ''' </summary>
    Public Shared ReadOnly Property postmphdrid() As String
      Get
        Return "postmp_hdrid"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'pos_date'
    ''' </summary>
    Public Shared ReadOnly Property posdate() As String
      Get
        Return "pos_date"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'custid'
    ''' </summary>
    Public Shared ReadOnly Property custid() As String
      Get
        Return "custid"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'pos_amnt'
    ''' </summary>
    Public Shared ReadOnly Property posamnt() As String
      Get
        Return "pos_amnt"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'tendered'
    ''' </summary>
    Public Shared ReadOnly Property tendered() As String
      Get
        Return "tendered"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'Cheyns'
    ''' </summary>
    Public Shared ReadOnly Property Cheyns() As String
      Get
        Return "Cheyns"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'Sc'
    ''' </summary>
    Public Shared ReadOnly Property Sc() As String
      Get
        Return "Sc"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'totsales'
    ''' </summary>
    Public Shared ReadOnly Property totsales() As String
      Get
        Return "totsales"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'less_vat'
    ''' </summary>
    Public Shared ReadOnly Property lessvat() As String
      Get
        Return "less_vat"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'nov'
    ''' </summary>
    Public Shared ReadOnly Property nov() As String
      Get
        Return "nov"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'less_sc'
    ''' </summary>
    Public Shared ReadOnly Property lesssc() As String
      Get
        Return "less_sc"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'vatable'
    ''' </summary>
    Public Shared ReadOnly Property vatable() As String
      Get
        Return "vatable"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'exempt'
    ''' </summary>
    Public Shared ReadOnly Property exempt() As String
      Get
        Return "exempt"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'vatamnt'
    ''' </summary>
    Public Shared ReadOnly Property vatamnt() As String
      Get
        Return "vatamnt"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'Expr2'
    ''' </summary>
    Public Shared ReadOnly Property Expr2() As String
      Get
        Return "Expr2"
      End Get
    End Property
    ''' <summary>
    ''' Returns 'wtid'
    ''' </summary>
    Public Shared ReadOnly Property wtid() As String
      Get
        Return "wtid"
      End Get
    End Property
  End Class
#End Region
End Class
