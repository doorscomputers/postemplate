Imports System
Imports System.Data
Imports System.Text

Imports PDSA.Common
Imports PDSA.DataLayer
Imports PDSA.DataLayer.DataClasses
Imports PDSA.Validation

'Imports DoorsPOS.WinApp
'Imports DoorsPOS.WinApp

''' <summary>
''' Used to Add/Edit/Delete/Select data from the pos_hdrtmp table.
''' This class is generated by the Haystack Code Generator for .NET.
''' You should NOT modify this class as it is intended to be re-generated.
''' </summary>
Public Class pos_hdrtmpData
  Inherits PDSADataClassTable

#Region "Constructors"
  ''' <summary>
  ''' Constructor for the pos_hdrtmpData class
  ''' </summary>
  Public Sub New()
    MyBase.New()

    _Entity = New pos_hdrtmp()
    ValidatorObject = New pos_hdrtmpValidator(_Entity)

    Init()
  End Sub

  ''' <summary>
  ''' Constructor for the pos_hdrtmpData class
  ''' </summary>
  ''' <param name="entity">An instance of a pos_hdrtmp</param>
  Public Sub New(ByVal entity As pos_hdrtmp)
    MyBase.New(entity)

    _Entity = entity
    ValidatorObject = New pos_hdrtmpValidator(_Entity)

    Init()
  End Sub

  ''' <summary>
  ''' Constructor for the pos_hdrtmpData class
  ''' </summary>
  ''' <param name="dataProvider">An instance of a PDSADataProvider</param>
  ''' <param name="entity">An instance of a pos_hdrtmp</param>
  Public Sub New(ByVal dataProvider As PDSADataProvider, ByVal entity As pos_hdrtmp)
    MyBase.New(dataProvider, entity)

    _Entity = entity
    ValidatorObject = New pos_hdrtmpValidator(_Entity)

    Init()
  End Sub

  ''' <summary>
  ''' Constructor for the pos_hdrtmpData class
  ''' </summary>
  ''' <param name="dataProvider">An instance of a PDSADataProvider</param>
  ''' <param name="entity">An instance of a pos_hdrtmp</param>
  ''' <param name="validator">An instance of a pos_hdrtmpValidator</param>
  Public Sub New(ByVal dataProvider As PDSADataProvider, _
    ByVal entity As pos_hdrtmp, ByVal validator As pos_hdrtmpValidator)
    MyBase.New(dataProvider, entity, validator)

    _Entity = entity
    ValidatorObject = validator

    Init()
  End Sub
#End Region

#Region "Private Filter Properties and Enumerations"
  Private _Entity As pos_hdrtmp

  Private _WhereFilter As WhereFilters
  Private _OrderByFilter As OrderByFilters
  Private _SelectFilter As SelectFilters
  Private _InsertFilter As InsertFilters
  Private _UpdateFilter As UpdateFilters
  Private _DeleteFilter As DeleteFilters
  Private _RowCountFilter As RowCountFilters
#End Region

#Region "Filter Enumerations"
  ''' <summary>
  ''' Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
  ''' </summary>
  Public Enum SelectFilters
    ''' <summary>
    ''' 'All' SelectFilter
    ''' </summary>
    All
    ''' <summary>
    ''' 'ListBox' SelectFilter
    ''' </summary>
    ListBox
    ''' <summary>
    ''' 'PrimaryKey' SelectFilter
    ''' </summary>
    PrimaryKey
    ''' <summary>
    ''' 'SumSales' SelectFilter
    ''' </summary>
    SumSales
    ''' <summary>
    ''' 'SumSDC' SelectFilter
    ''' </summary>
    SumSDC
    ''' <summary>
    ''' A Custom SelectFilter
    ''' </summary>
    Custom
  End Enum

  ''' <summary>
  ''' Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
  ''' </summary>
  Public Enum WhereFilters
    ''' <summary>
    ''' No WhereFilter Selected
    ''' </summary>
    None
    ''' <summary>
    ''' A Custom WhereFilter
    ''' </summary>
    Custom
    ''' <summary>
    ''' 'CashMode' WhereFilter
    ''' </summary>
    CashMode
    ''' <summary>
    ''' 'CreditMode' WhereFilter
    ''' </summary>
    CreditMode
    ''' <summary>
    ''' 'custid' WhereFilter
    ''' </summary>
    custid
    ''' <summary>
    ''' 'LikesInsert_id' WhereFilter
    ''' </summary>
    LikesInsert_id
    ''' <summary>
    ''' 'postmp_hdrid' WhereFilter
    ''' </summary>
    postmp_hdrid
    ''' <summary>
    ''' 'PrimaryKey' WhereFilter
    ''' </summary>
    PrimaryKey
    ''' <summary>
    ''' 'sInsert_id' WhereFilter
    ''' </summary>
    sInsert_id
    ''' <summary>
    ''' 'tblstatus' WhereFilter
    ''' </summary>
    tblstatus
  End Enum

  ''' <summary>
  ''' Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
  ''' </summary>
  Public Enum OrderByFilters
    ''' <summary>
    ''' No OrderByFilter Selected
    ''' </summary>
    None
    ''' <summary>
    ''' A Custom OrderByFilter
    ''' </summary>
    Custom
    ''' <summary>
    ''' 'sInsert_id' OrderByFilter
    ''' </summary>
    sInsert_id
  End Enum

  ''' <summary>
  ''' Enumeration for selecting an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
  ''' </summary>
  Public Enum InsertFilters
    ''' <summary>
    ''' 'All' InsertFilter
    ''' </summary>
    All
    ''' <summary>
    ''' A Custom InsertFilter
    ''' </summary>
    Custom
  End Enum

  ''' <summary>
  ''' Enumeration for selecting an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
  ''' </summary>
  Public Enum UpdateFilters
    ''' <summary>
    ''' 'PrimaryKey' UpdateFilter
    ''' </summary>
    PrimaryKey
    ''' <summary>
    ''' A Custom UpdateFilter
    ''' </summary>
    Custom
  End Enum

  ''' <summary>
  ''' Enumeration for selecting a DELETE statement or DELETE stored procedure to execute when calling the Delete() method.
  ''' </summary>
  Public Enum DeleteFilters
    ''' <summary>
    ''' 'All' DeleteFilter
    ''' </summary>
    All
    ''' <summary>
    ''' 'DeleteByPK' DeleteFilter
    ''' </summary>
    DeleteByPK
    ''' <summary>
    ''' 'tebol' DeleteFilter
    ''' </summary>
    tebol
    ''' <summary>
    ''' A Custom DeleteFilter
    ''' </summary>
    Custom
  End Enum

  ''' <summary>
  ''' Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
  ''' </summary>
  Public Enum RowCountFilters
    ''' <summary>
    ''' 'All' RowCountFilter
    ''' </summary>
    All
    ''' <summary>
    ''' S Custom RowCountFilter
    ''' </summary>
    Custom
  End Enum
#End Region

#Region "Public Entity Property"
  ''' <summary>
  ''' Get/Set the Entity class that will be used to get and set properties/fields for this data class.
  ''' </summary>
  Public Property Entity() As pos_hdrtmp
    Get
      Return _Entity
    End Get
    Set(ByVal value As pos_hdrtmp)
      _Entity = value
      MyBase.EntityObject = _Entity
    End Set
  End Property

  ''' <summary>
  ''' Get/Set a Dynamic SQL or Stored Procedure to execute to return data.
  ''' </summary>
  Public Property SelectFilter() As SelectFilters
    Get
      Return _SelectFilter
    End Get
    Set(ByVal Value As SelectFilters)
      _SelectFilter = Value
    End Set
  End Property

  ''' <summary>
  ''' Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
  ''' </summary>
  Public Property WhereFilter() As WhereFilters
    Get
      Return _WhereFilter
    End Get
    Set(ByVal Value As WhereFilters)
      _WhereFilter = Value
    End Set
  End Property

  ''' <summary>
  ''' Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
  ''' </summary>
  Public Property OrderByFilter() As OrderByFilters
    Get
      Return _OrderByFilter
    End Get
    Set(ByVal Value As OrderByFilters)
      _OrderByFilter = Value
    End Set
  End Property

  ''' <summary>
  ''' Get/Set an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
  ''' </summary>
  Public Property InsertFilter() As InsertFilters
    Get
      Return _InsertFilter
    End Get
    Set(ByVal Value As InsertFilters)
      _InsertFilter = Value
    End Set
  End Property

  ''' <summary>
  ''' Get/Set an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
  ''' </summary>
  Public Property UpdateFilter() As UpdateFilters
    Get
      Return _UpdateFilter
    End Get
    Set(ByVal Value As UpdateFilters)
      _UpdateFilter = Value
      If _UpdateFilter = UpdateFilters.Custom Then
        PerformValidation = False
      End If
    End Set
  End Property

  ''' <summary>
  ''' Get/Set a DELETE statement or DELETE stored procedure to execute when calling the Delete() method. You might need to set a WhereFilter as well.
  ''' </summary>
  Public Property DeleteFilter() As DeleteFilters
    Get
      Return _DeleteFilter
    End Get
    Set(ByVal Value As DeleteFilters)
      _DeleteFilter = Value
    End Set
  End Property

  ''' <summary>
  ''' Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
  ''' </summary>
  Public Property RowCountFilter() As RowCountFilters
    Get
      Return _RowCountFilter
    End Get
    Set(ByVal Value As RowCountFilters)
      _RowCountFilter = Value
    End Set
  End Property
#End Region

#Region "Init Method"
  ''' <summary>
  ''' Initializes this class to a valid start state.
  ''' </summary>
  Protected Overrides Sub Init()
    ClassName = "pos_hdrtmpData"
    DBObjectName = "pos_hdrtmp"
    SchemaName = "dbo"
    PrimaryKeyType = PDSAPrimaryKeyType.SQLIdentity
    PrimaryKeyGenerate = False
    UseAuditTracking = DataProvider.UseDBAuditTracking
    UseStoredProcs = DataProvider.UseStoredProcedures

    MyBase.EntityObject = Entity
    MyBase.ValidatorObject = ValidatorObject

    ' Set Reference to ValidatorObject Properties Collection
    AllColumns = ValidatorObject.Properties

    ' Create Data Columns
    InitDataColumns()
  End Sub
#End Region

#Region "InitDataColumns Method"
  ''' <summary>
  ''' Initializes all of the Data Columns with valid data for each field in the table.
  ''' </summary>
  Protected Overrides Sub InitDataColumns()
    Dim prop As PDSAProperty

    ' Fill in Column Properties
    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.postmphdrid)
    prop.IsInsertable = False
    prop.IsUpdatable = False
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.posdate)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null
    prop.ValueForNull = Convert.ToDateTime("1/1/1753", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat)

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Receipt)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.custid)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.disc)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlDouble.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.posamnt)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.discamnt)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.tendered)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Cheyns)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.subtot)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.posted)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null
    prop.ValueForNull = Nothing

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.postme)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null
    prop.ValueForNull = Convert.ToDateTime("1/1/1753", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat)

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.costamnt)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.sInsertid)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlChars.Null
    prop.ValueForNull = String.Empty

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.dtInsertdt)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null
    prop.ValueForNull = Convert.ToDateTime("1/1/1753", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat)

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.sLastUpdateid)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlChars.Null
    prop.ValueForNull = String.Empty

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.dtLastUpdatedt)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null
    prop.ValueForNull = Convert.ToDateTime("1/1/1753", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat)

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.iConcurrencyid)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.cheque)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlChars.Null
    prop.ValueForNull = String.Empty

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.mowd)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlChars.Null
    prop.ValueForNull = String.Empty

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.paidamnt)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.status)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null
    prop.ValueForNull = Nothing

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.bal)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Custnum)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Sc)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.totsales)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.lessvat)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.nov)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.lesssc)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.vatable)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.exempt)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.vatamnt)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.tid)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlChars.Null
    prop.ValueForNull = String.Empty

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.wtid)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.trminal)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null
    prop.ValueForNull = 0

  End Sub
#End Region

#Region "EntityDataToColumnCollection Method"
  ''' <summary>
  ''' Moves the data from the Entity class into the Columns collection
  ''' This is called prior to performing a Business Rule Check, an INSERT, UPDATE or DELETE
  ''' </summary>
  Protected Overrides Sub EntityDataToColumnCollection()
    ' Move all Entity Values into Properties Collection
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.postmphdrid).Value = Entity.postmphdrid
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.posdate).Value = Entity.posdate
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Receipt).Value = Entity.Receipt
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.custid).Value = Entity.custid
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.disc).Value = Entity.disc
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.posamnt).Value = Entity.posamnt
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.discamnt).Value = Entity.discamnt
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.tendered).Value = Entity.tendered
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Cheyns).Value = Entity.Cheyns
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.subtot).Value = Entity.subtot
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.posted).Value = Entity.posted
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.postme).Value = Entity.postme
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.costamnt).Value = Entity.costamnt
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.sInsertid).Value = Entity.sInsertid
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.dtInsertdt).Value = Entity.dtInsertdt
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.sLastUpdateid).Value = Entity.sLastUpdateid
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.dtLastUpdatedt).Value = Entity.dtLastUpdatedt
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.iConcurrencyid).Value = Entity.iConcurrencyid
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.cheque).Value = Entity.cheque
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.mowd).Value = Entity.mowd
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.paidamnt).Value = Entity.paidamnt
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.status).Value = Entity.status
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.bal).Value = Entity.bal
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Custnum).Value = Entity.Custnum
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Sc).Value = Entity.Sc
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.totsales).Value = Entity.totsales
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.lessvat).Value = Entity.lessvat
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.nov).Value = Entity.nov
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.lesssc).Value = Entity.lesssc
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.vatable).Value = Entity.vatable
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.exempt).Value = Entity.exempt
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.vatamnt).Value = Entity.vatamnt
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.tid).Value = Entity.tid
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.wtid).Value = Entity.wtid
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.trminal).Value = Entity.trminal
  End Sub
#End Region

#Region "ColumnCollectionToEntityData Method"
  ''' <summary>
  ''' Moves the data from the Columns collection into the Entity class.
  ''' This is called whenever you are reading data in from a database.
  ''' </summary>
  Protected Overrides Sub ColumnCollectionToEntityData()
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.postmphdrid).IsNull = False Then
      Entity.postmphdrid = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.postmphdrid).GetAsInteger()
    Else
      Entity.postmphdrid = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.posdate).IsNull = False Then
      Entity.posdate = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.posdate).GetAsDate()
    Else
      Entity.posdate = Convert.ToDateTime("1/1/1753", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat)
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Receipt).IsNull = False Then
      Entity.Receipt = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Receipt).GetAsInteger()
    Else
      Entity.Receipt = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.custid).IsNull = False Then
      Entity.custid = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.custid).GetAsInteger()
    Else
      Entity.custid = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.disc).IsNull = False Then
      Entity.disc = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.disc).GetAsDouble()
    Else
      Entity.disc = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.posamnt).IsNull = False Then
      Entity.posamnt = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.posamnt).GetAsDecimal()
    Else
      Entity.posamnt = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.discamnt).IsNull = False Then
      Entity.discamnt = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.discamnt).GetAsDecimal()
    Else
      Entity.discamnt = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.tendered).IsNull = False Then
      Entity.tendered = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.tendered).GetAsDecimal()
    Else
      Entity.tendered = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Cheyns).IsNull = False Then
      Entity.Cheyns = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Cheyns).GetAsDecimal()
    Else
      Entity.Cheyns = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.subtot).IsNull = False Then
      Entity.subtot = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.subtot).GetAsDecimal()
    Else
      Entity.subtot = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.posted).IsNull = False Then
      Entity.posted = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.posted).GetValueAsBoolean()
    Else
      Entity.posted = Nothing
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.postme).IsNull = False Then
      Entity.postme = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.postme).GetAsDate()
    Else
      Entity.postme = Convert.ToDateTime("1/1/1753", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat)
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.costamnt).IsNull = False Then
      Entity.costamnt = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.costamnt).GetAsDecimal()
    Else
      Entity.costamnt = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.sInsertid).IsNull = False Then
      Entity.sInsertid = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.sInsertid).GetAsString()
    Else
      Entity.sInsertid = String.Empty
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.dtInsertdt).IsNull = False Then
      Entity.dtInsertdt = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.dtInsertdt).GetAsDate()
    Else
      Entity.dtInsertdt = Convert.ToDateTime("1/1/1753", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat)
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.sLastUpdateid).IsNull = False Then
      Entity.sLastUpdateid = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.sLastUpdateid).GetAsString()
    Else
      Entity.sLastUpdateid = String.Empty
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.dtLastUpdatedt).IsNull = False Then
      Entity.dtLastUpdatedt = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.dtLastUpdatedt).GetAsDate()
    Else
      Entity.dtLastUpdatedt = Convert.ToDateTime("1/1/1753", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat)
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.iConcurrencyid).IsNull = False Then
      Entity.iConcurrencyid = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.iConcurrencyid).GetAsShort()
    Else
      Entity.iConcurrencyid = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.cheque).IsNull = False Then
      Entity.cheque = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.cheque).GetAsString()
    Else
      Entity.cheque = String.Empty
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.mowd).IsNull = False Then
      Entity.mowd = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.mowd).GetAsString()
    Else
      Entity.mowd = String.Empty
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.paidamnt).IsNull = False Then
      Entity.paidamnt = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.paidamnt).GetAsDecimal()
    Else
      Entity.paidamnt = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.status).IsNull = False Then
      Entity.status = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.status).GetValueAsBoolean()
    Else
      Entity.status = Nothing
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.bal).IsNull = False Then
      Entity.bal = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.bal).GetAsDecimal()
    Else
      Entity.bal = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Custnum).IsNull = False Then
      Entity.Custnum = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Custnum).GetAsInteger()
    Else
      Entity.Custnum = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Sc).IsNull = False Then
      Entity.Sc = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Sc).GetAsInteger()
    Else
      Entity.Sc = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.totsales).IsNull = False Then
      Entity.totsales = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.totsales).GetAsDecimal()
    Else
      Entity.totsales = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.lessvat).IsNull = False Then
      Entity.lessvat = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.lessvat).GetAsDecimal()
    Else
      Entity.lessvat = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.nov).IsNull = False Then
      Entity.nov = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.nov).GetAsDecimal()
    Else
      Entity.nov = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.lesssc).IsNull = False Then
      Entity.lesssc = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.lesssc).GetAsDecimal()
    Else
      Entity.lesssc = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.vatable).IsNull = False Then
      Entity.vatable = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.vatable).GetAsDecimal()
    Else
      Entity.vatable = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.exempt).IsNull = False Then
      Entity.exempt = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.exempt).GetAsDecimal()
    Else
      Entity.exempt = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.vatamnt).IsNull = False Then
      Entity.vatamnt = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.vatamnt).GetAsDecimal()
    Else
      Entity.vatamnt = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.tid).IsNull = False Then
      Entity.tid = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.tid).GetAsString()
    Else
      Entity.tid = String.Empty
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.wtid).IsNull = False Then
      Entity.wtid = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.wtid).GetAsInteger()
    Else
      Entity.wtid = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.trminal).IsNull = False Then
      Entity.trminal = ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.trminal).GetAsInteger()
    Else
      Entity.trminal = 0
    End If
    
  End Sub
#End Region

#Region "CreateEntityFromDataRow Method"
  ''' <summary>
  ''' Creates an Entity object from a DataRow object.
  ''' </summary>
  ''' <param name="dr">DataRow object with all fields from the table in it.</param>
  ''' <returns>pos_hdrtmp</returns>
  Public Function CreateEntityFromDataRow(ByVal dr As DataRow) As pos_hdrtmp
    ' Create new Entity Object
    Entity = New pos_hdrtmp()

    ' Move all data into Properties collection
    ' This method calls the ColumnCollectionToEntityData method
    DataRowToProperties(dr)
    Entity.IsDirty = False

    Return Entity
  End Function
#End Region

#Region "SelectSQL Method"
  ''' <summary>
  ''' Builds the SQL for the SELECT statement, or SELECT stored procedure based on the SelectFilter property.
  ''' </summary>
  ''' <returns>string</returns>
  Public Overrides Function SelectSQL() As String
    Dim sb As StringBuilder = New StringBuilder(SB_INIT_LENGTH)

    Select Case SelectFilter
      Case SelectFilters.All
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" SELECT postmp_hdrid, pos_date, Receipt, custid, disc, pos_amnt, disc_amnt, tendered, Cheyns, subtot, posted, pos_tme, cost_amnt, sInsert_id, dtInsert_dt, sLastUpdate_id, dtLastUpdate_dt, iConcurrency_id, cheque, mowd, paidamnt, status, bal, Custnum, Sc, totsales, less_vat, nov, less_sc, vatable, exempt, vatamnt, tid, wtid, trminal FROM dbo.pos_hdrtmp")

        End If
      Case SelectFilters.ListBox
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" SELECT postmp_hdrid, sInsert_id FROM dbo.pos_hdrtmp")

        End If
      Case SelectFilters.PrimaryKey
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" SELECT postmp_hdrid, pos_date, custid, disc, pos_amnt, disc_amnt, tendered, Cheyns, subtot, posted, pos_tme, cost_amnt, sInsert_id, dtInsert_dt, sLastUpdate_id, dtLastUpdate_dt, iConcurrency_id, cheque, mowd, paidamnt, status, bal, Custnum, Sc, totsales, less_vat, nov, less_sc, vatable, exempt, vatamnt, tid, wtid, trminal FROM dbo.pos_hdrtmp")

        End If
      Case SelectFilters.SumSales
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" SELECT ")
sb.Append(" Sum(totsales)")
sb.Append(" FROM dbo.pos_hdrtmp")

        End If
      Case SelectFilters.SumSDC
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" SELECT ")
sb.Append(" Sum(totsales), Sum(disc_amnt)")
sb.Append(" FROM dbo.pos_hdrtmp")

        End If

      Case SelectFilters.Custom
        sb.Append(SelectCustom)

    End Select

    SQL = sb.ToString()

    Return SQL
  End Function
#End Region

#Region "InsertSQL Method"
  ''' <summary>
  ''' Builds the SQL for the INSERT statement, or INSERT stored procedure based on the InsertFilter property.
  ''' </summary>
  ''' <returns>string</returns>
  Public Overrides Function InsertSQL() As String
    Dim sb As StringBuilder = New StringBuilder(SB_INIT_LENGTH)

    Select Case InsertFilter
      Case InsertFilters.All
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" INSERT INTO dbo.pos_hdrtmp ( pos_date, Receipt, custid, disc, pos_amnt, disc_amnt, tendered, Cheyns, subtot, posted, pos_tme, cost_amnt, sInsert_id, dtInsert_dt, sLastUpdate_id, dtLastUpdate_dt, iConcurrency_id, cheque, mowd, paidamnt, status, bal, Custnum, Sc, totsales, less_vat, nov, less_sc, vatable, exempt, vatamnt, tid, wtid, trminal ) VALUES ( @posdate, @Receipt, @custid, @disc, @posamnt, @discamnt, @tendered, @Cheyns, @subtot, @posted, @postme, @costamnt, @sInsertid, @dtInsertdt, @sLastUpdateid, @dtLastUpdatedt, @iConcurrencyid, @cheque, @mowd, @paidamnt, @status, @bal, @Custnum, @Sc, @totsales, @lessvat, @nov, @lesssc, @vatable, @exempt, @vatamnt, @tid, @wtid, @trminal )")

        End If

      Case InsertFilters.Custom
        sb.Append(InsertCustom)
    End Select

    SQL = sb.ToString()

    Return SQL
  End Function
#End Region

#Region "UpdateSQL Method"
  ''' <summary>
  ''' Builds the SQL for the UPDATE statement, or UPDATE stored procedure based on the UpdateFilter property.
  ''' </summary>
  ''' <returns>string</returns>
  Public Overrides Function UpdateSQL() As String
    Dim sb As StringBuilder = New StringBuilder(SB_INIT_LENGTH)

    Select Case UpdateFilter
      Case UpdateFilters.PrimaryKey
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" UPDATE dbo.pos_hdrtmp SET pos_date = @posdate, Receipt = @Receipt, custid = @custid, disc = @disc, pos_amnt = @posamnt, disc_amnt = @discamnt, tendered = @tendered, Cheyns = @Cheyns, subtot = @subtot, posted = @posted, pos_tme = @postme, cost_amnt = @costamnt, sInsert_id = @sInsertid, dtInsert_dt = @dtInsertdt, sLastUpdate_id = @sLastUpdateid, dtLastUpdate_dt = @dtLastUpdatedt, iConcurrency_id = @iConcurrencyid, cheque = @cheque, mowd = @mowd, paidamnt = @paidamnt, status = @status, bal = @bal, Custnum = @Custnum, Sc = @Sc, totsales = @totsales, less_vat = @lessvat, nov = @nov, less_sc = @lesssc, vatable = @vatable, exempt = @exempt, vatamnt = @vatamnt, tid = @tid, wtid = @wtid, trminal = @trminal WHERE postmp_hdrid = @postmphdrid")

        End If

      Case UpdateFilters.Custom
        sb.Append(UpdateCustom)

    End Select

    SQL = sb.ToString()

    Return SQL
  End Function
#End Region

#Region "DeleteByPK Method"
  ''' <summary>
  ''' Delete a record from the table based on the primary key value that is passed in.
  ''' </summary>
  ''' <param name="postmphdrid">The value of the primary key of the row to delete</param>
  ''' <returns>int</returns>
  Public Function DeleteByPK(ByVal postmphdrid As Integer) As Integer
    DeleteFilter = DeleteFilters.DeleteByPK
    Entity.postmphdrid = postmphdrid

    ' If using Audit Tracking, need to load the record first
    If UseAuditTracking Then
      LoadByPK(postmphdrid)
    End If

    ' Set WhereFilter to None, because it got set in LoadByPK
    WhereFilter = WhereFilters.None
    RowsAffected = Delete()

    Return RowsAffected
  End Function
#End Region

#Region "DeleteSQL Method"
  ''' <summary>
  ''' Builds the SQL for the DELETE statement, or DELETE stored procedure. You can set the WhereFilter property to selectively delete rows from the table.
  ''' </summary>
  ''' <returns>string</returns>
  Public Overrides Function DeleteSQL() As String
    Dim sb As StringBuilder = New StringBuilder(SB_INIT_LENGTH)

    Select Case DeleteFilter
      Case DeleteFilters.All
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" DELETE FROM dbo.pos_hdrtmp")

        End If
      Case DeleteFilters.DeleteByPK
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" DELETE FROM dbo.pos_hdrtmp")
sb.Append("  WHERE postmp_hdrid = @postmp_hdrid")

        End If
      Case DeleteFilters.tebol
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" DELETE FROM dbo.pos_hdrtmp")
sb.Append("  WHERE tid = @tid")

        End If

      Case DeleteFilters.Custom
        sb.Append(DeleteCustom)

    End Select

    If UseStoredProcs = False Then
      sb.Append(WhereClauseSQL())
    End If

    SQL = sb.ToString()

    Return SQL
  End Function
#End Region

#Region "RowCountSQL Method"
  ''' <summary>
  ''' Builds the SELECT Count(*) SQL, or the name of the stored procedure, that will count the number of rows.
  ''' </summary>
  ''' <returns>string</returns>
  Public Overrides Function RowCountSQL() As String
    Dim sb As StringBuilder = New StringBuilder(SB_INIT_LENGTH)

    Select Case RowCountFilter
      Case RowCountFilters.All
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" SELECT Count(*) As NumRecs FROM dbo.pos_hdrtmp")

        End If

      Case RowCountFilters.Custom
        sb.Append(RowCountCustom)

    End Select

    If UseStoredProcs = False Then
      sb.Append(WhereClauseSQL())
    End If

    SQL = sb.ToString()

    Return SQL
  End Function
#End Region

#Region "LoadByPK Method"
  ''' <summary>
  ''' Load a row of data in the Entity properties
  ''' </summary>
  ''' <param name="postmphdrid">The value of the primary key of the row to load</param>
  ''' <returns>Int32</returns>
  Public Function LoadByPK(ByVal postmphdrid As Integer) As Integer
    SelectFilter = SelectFilters.PrimaryKey
    Entity.postmphdrid = postmphdrid

    ' Load data into Properties
    RowsAffected = Load()

    ' Reset all Collection Properties
    ResetCollectionProperties()

    Return RowsAffected
  End Function
#End Region

#Region "WhereClauseSQL Method"
  ''' <summary>
  ''' Builds the WHERE clause to be used in combination with a SELECT statement.
  ''' </summary>
  ''' <returns>string</returns>
  Public Overrides Function WhereClauseSQL() As String
    Dim sb As StringBuilder = New StringBuilder(SB_INIT_LENGTH)

    Select Case WhereFilter
      Case WhereFilters.Custom
        sb.Append(WhereCustom)

      Case WhereFilters.None
        ' Do nothing

      Case WhereFilters.CashMode
        sb.Append(" WHERE sInsert_id  =  @sInsert_id AND status  =  1 AND mowd  =  'CASH'")
          
      Case WhereFilters.CreditMode
        sb.Append(" WHERE sInsert_id  =  @sInsert_id AND status  =  1 AND mowd  =  'CREDIT'")
          
      Case WhereFilters.custid
        sb.Append(" WHERE custid = @custid")
          
      Case WhereFilters.LikesInsert_id
        sb.Append(" WHERE sInsert_id LIKE @sInsertid")
          
      Case WhereFilters.postmp_hdrid
        sb.Append(" WHERE postmp_hdrid = @postmphdrid And sInsert_id = @sInsertid")
          
      Case WhereFilters.PrimaryKey
        sb.Append(" WHERE postmp_hdrid = @postmphdrid")
          
      Case WhereFilters.sInsert_id
        sb.Append(" WHERE sInsert_id = @sInsertid")
          
      Case WhereFilters.tblstatus
        sb.Append(" WHERE posted  =  @posted AND tid  =  @tid")
          
    End Select

    Return sb.ToString()
  End Function
#End Region

#Region "WhereClauseFillInParameters Method"
  ''' <summary>
  ''' Builds the CommandObject.Parameters collection for any WHERE clause parameters.
  ''' </summary>
  Protected Overrides Sub WhereClauseFillInParameters()
    Select Case WhereFilter
      Case WhereFilters.CashMode
        CommandObject.Parameters.Add(DataProvider.CreateParameter("sInsertid", DbType.String, Entity.sInsertid))
        CommandObject.Parameters.Add(DataProvider.CreateParameter("status", DbType.Boolean, Entity.status))
        CommandObject.Parameters.Add(DataProvider.CreateParameter("mowd", DbType.String, Entity.mowd))
      Case WhereFilters.CreditMode
        CommandObject.Parameters.Add(DataProvider.CreateParameter("sInsertid", DbType.String, Entity.sInsertid))
        CommandObject.Parameters.Add(DataProvider.CreateParameter("status", DbType.Boolean, Entity.status))
        CommandObject.Parameters.Add(DataProvider.CreateParameter("mowd", DbType.String, Entity.mowd))
      Case WhereFilters.custid
        CommandObject.Parameters.Add(DataProvider.CreateParameter("custid", DbType.Int32, Entity.custid))
      Case WhereFilters.LikesInsert_id
        CommandObject.Parameters.Add(DataProvider.CreateParameter("sInsertid", DbType.String, Entity.sInsertid))
      Case WhereFilters.postmp_hdrid
        CommandObject.Parameters.Add(DataProvider.CreateParameter("postmphdrid", DbType.Int32, Entity.postmphdrid))
        CommandObject.Parameters.Add(DataProvider.CreateParameter("sInsertid", DbType.String, Entity.sInsertid))
      Case WhereFilters.PrimaryKey
        CommandObject.Parameters.Add(DataProvider.CreateParameter("postmphdrid", DbType.Int32, Entity.postmphdrid))
      Case WhereFilters.sInsert_id
        CommandObject.Parameters.Add(DataProvider.CreateParameter("sInsertid", DbType.String, Entity.sInsertid))
      Case WhereFilters.tblstatus
        CommandObject.Parameters.Add(DataProvider.CreateParameter("posted", DbType.Boolean, Entity.posted))
        CommandObject.Parameters.Add(DataProvider.CreateParameter("tid", DbType.String, Entity.tid))
      
      

    End Select
  End Sub
#End Region

#Region "OrderByClauseSQL Method"
  ''' <summary>
  ''' Builds the ORDER BY clause to be used in combination with a SELECT statement.
  ''' </summary>
  ''' <returns>string</returns>
  Public Overrides Function OrderByClauseSQL() As String
    Dim sb As StringBuilder = New StringBuilder(SB_INIT_LENGTH)

    Select Case OrderByFilter
      Case OrderByFilters.None
        '  Do Nothing

      Case OrderByFilters.Custom
        sb.Append(OrderByCustom)

      Case OrderByFilters.sInsert_id
          sb.Append(" ORDER BY sInsert_id")


    End Select

    Return sb.ToString()
  End Function
#End Region

#Region "SelectFillInParameters Method"
  ''' <summary>
  ''' Builds the CommandObject.Parameters collection for any SELECT statement parameters.
  ''' </summary>
  Protected Overrides Sub SelectFillInParameters()
    Select Case SelectFilter
      Case SelectFilters.All
      
      Case SelectFilters.ListBox
      
      Case SelectFilters.PrimaryKey
      
      Case SelectFilters.SumSales
      
      Case SelectFilters.SumSDC
      
  
    End Select
  End Sub
#End Region

#Region "PrimaryKeySet Method"
  ''' <summary>
  ''' Sets the primary key field in the Entity and in the Data Columns Collection.
  ''' </summary>
  ''' <param name="postmphdrid">The value of the primary key to set</param>
  Public Overrides Sub PrimaryKeySet(ByVal postmphdrid As Integer)
    ' Fill in Entity Values
    Entity.postmphdrid = postmphdrid
    ' Fill in Columns Collection
    ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.postmphdrid).Value = postmphdrid
  End Sub
#End Region

#Region "SetModificationCommandParameters Method"
  ''' <summary>
  ''' Called to build any parameters prior to submitting an INSERT, UPDATE, DELETE statement.
  ''' </summary>
  Protected Overrides Sub SetModificationCommandParameters()
    Select Case DataModificationAction
      Case PDSADataModificationState.Delete
        Select Case DeleteFilter
        
          Case DeleteFilters.All
            CommandObject.Parameters.Clear()
          Case DeleteFilters.DeleteByPK
            CommandObject.Parameters.Clear()
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@postmphdrid", DbType.Int32, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.postmphdrid).Value))
          Case DeleteFilters.tebol
            CommandObject.Parameters.Clear()
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@tid", DbType.String, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.tid).Value))
          
        End Select        
        If Me.WhereFilter <> WhereFilters.None Then
          WhereClauseFillInParameters()
        End If
      
      Case PDSADataModificationState.Insert
        If PrimaryKeyType = PDSAPrimaryKeyType.PDSA Then
          If PrimaryKeyGenerate = True Then
            '  Get New Primary Key from pdsaTableIds
            PrimaryKeySet(PKGetFromPDSATableIds(PDSALoginName))
          End If
        End If

        ' Clear any Where Filter when doing an INSERT
        Me.WhereFilter = WhereFilters.None

        Select Case InsertFilter
          Case InsertFilters.All
            CommandObject.Parameters.Clear()
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@posdate", DbType.Date, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.posdate).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@Receipt", DbType.Int32, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Receipt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@custid", DbType.Int32, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.custid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@disc", DbType.Double, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.disc).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@posamnt", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.posamnt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@discamnt", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.discamnt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@tendered", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.tendered).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@Cheyns", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Cheyns).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@subtot", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.subtot).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@posted", DbType.Boolean, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.posted).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@postme", DbType.Date, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.postme).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@costamnt", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.costamnt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@sInsertid", DbType.String, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.sInsertid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@dtInsertdt", DbType.Date, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.dtInsertdt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@sLastUpdateid", DbType.String, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.sLastUpdateid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@dtLastUpdatedt", DbType.Date, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.dtLastUpdatedt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@iConcurrencyid", DbType.Int16, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.iConcurrencyid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@cheque", DbType.String, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.cheque).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@mowd", DbType.String, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.mowd).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@paidamnt", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.paidamnt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@status", DbType.Boolean, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.status).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@bal", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.bal).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@Custnum", DbType.Int32, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Custnum).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@Sc", DbType.Int32, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Sc).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@totsales", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.totsales).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@lessvat", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.lessvat).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@nov", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.nov).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@lesssc", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.lesssc).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@vatable", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.vatable).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@exempt", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.exempt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@vatamnt", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.vatamnt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@tid", DbType.String, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.tid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@wtid", DbType.Int32, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.wtid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@trminal", DbType.Int32, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.trminal).Value))

        End Select

      Case PDSADataModificationState.Update
        Select Case UpdateFilter
          Case UpdateFilters.PrimaryKey
            CommandObject.Parameters.Clear()
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@posdate", DbType.Date, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.posdate).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@Receipt", DbType.Int32, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Receipt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@custid", DbType.Int32, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.custid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@disc", DbType.Double, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.disc).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@posamnt", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.posamnt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@discamnt", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.discamnt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@tendered", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.tendered).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@Cheyns", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Cheyns).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@subtot", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.subtot).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@posted", DbType.Boolean, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.posted).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@postme", DbType.Date, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.postme).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@costamnt", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.costamnt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@sInsertid", DbType.String, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.sInsertid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@dtInsertdt", DbType.Date, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.dtInsertdt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@sLastUpdateid", DbType.String, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.sLastUpdateid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@dtLastUpdatedt", DbType.Date, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.dtLastUpdatedt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@iConcurrencyid", DbType.Int16, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.iConcurrencyid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@cheque", DbType.String, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.cheque).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@mowd", DbType.String, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.mowd).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@paidamnt", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.paidamnt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@status", DbType.Boolean, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.status).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@bal", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.bal).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@Custnum", DbType.Int32, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Custnum).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@Sc", DbType.Int32, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.Sc).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@totsales", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.totsales).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@lessvat", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.lessvat).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@nov", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.nov).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@lesssc", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.lesssc).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@vatable", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.vatable).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@exempt", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.exempt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@vatamnt", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.vatamnt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@tid", DbType.String, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.tid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@wtid", DbType.Int32, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.wtid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@trminal", DbType.Int32, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.trminal).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@postmphdrid", DbType.Int32, ValidatorObject.Properties.GetByName(pos_hdrtmpValidator.ColumnNames.postmphdrid).Value))

        End Select
    End Select
  End Sub
#End Region
End Class
