Imports System
Imports System.Data
Imports System.Text

Imports PDSA.Common
Imports PDSA.DataLayer
Imports PDSA.DataLayer.DataClasses
Imports PDSA.Validation

'Imports DoorsPOS.WinApp
'Imports DoorsPOS.WinApp

''' <summary>
''' Used to Add/Edit/Delete/Select data from the pos_det table.
''' This class is generated by the Haystack Code Generator for .NET.
''' You should NOT modify this class as it is intended to be re-generated.
''' </summary>
Public Class pos_detData
  Inherits PDSADataClassTable

#Region "Constructors"
  ''' <summary>
  ''' Constructor for the pos_detData class
  ''' </summary>
  Public Sub New()
    MyBase.New()

    _Entity = New pos_det()
    ValidatorObject = New pos_detValidator(_Entity)

    Init()
  End Sub

  ''' <summary>
  ''' Constructor for the pos_detData class
  ''' </summary>
  ''' <param name="entity">An instance of a pos_det</param>
  Public Sub New(ByVal entity As pos_det)
    MyBase.New(entity)

    _Entity = entity
    ValidatorObject = New pos_detValidator(_Entity)

    Init()
  End Sub

  ''' <summary>
  ''' Constructor for the pos_detData class
  ''' </summary>
  ''' <param name="dataProvider">An instance of a PDSADataProvider</param>
  ''' <param name="entity">An instance of a pos_det</param>
  Public Sub New(ByVal dataProvider As PDSADataProvider, ByVal entity As pos_det)
    MyBase.New(dataProvider, entity)

    _Entity = entity
    ValidatorObject = New pos_detValidator(_Entity)

    Init()
  End Sub

  ''' <summary>
  ''' Constructor for the pos_detData class
  ''' </summary>
  ''' <param name="dataProvider">An instance of a PDSADataProvider</param>
  ''' <param name="entity">An instance of a pos_det</param>
  ''' <param name="validator">An instance of a pos_detValidator</param>
  Public Sub New(ByVal dataProvider As PDSADataProvider, _
    ByVal entity As pos_det, ByVal validator As pos_detValidator)
    MyBase.New(dataProvider, entity, validator)

    _Entity = entity
    ValidatorObject = validator

    Init()
  End Sub
#End Region

#Region "Private Filter Properties and Enumerations"
  Private _Entity As pos_det

  Private _WhereFilter As WhereFilters
  Private _OrderByFilter As OrderByFilters
  Private _SelectFilter As SelectFilters
  Private _InsertFilter As InsertFilters
  Private _UpdateFilter As UpdateFilters
  Private _DeleteFilter As DeleteFilters
  Private _RowCountFilter As RowCountFilters
#End Region

#Region "Filter Enumerations"
  ''' <summary>
  ''' Enumeration for selecting a SELECT statement when calling the Load, GetDataSet or GetDataReader method.
  ''' </summary>
  Public Enum SelectFilters
    ''' <summary>
    ''' 'All' SelectFilter
    ''' </summary>
    All
    ''' <summary>
    ''' 'ListBox' SelectFilter
    ''' </summary>
    ListBox
    ''' <summary>
    ''' 'PrimaryKey' SelectFilter
    ''' </summary>
    PrimaryKey
    ''' <summary>
    ''' 'refunds' SelectFilter
    ''' </summary>
    refunds
    ''' <summary>
    ''' A Custom SelectFilter
    ''' </summary>
    Custom
  End Enum

  ''' <summary>
  ''' Enumeration for selecting a WHERE statement when calling the Load, GetDataSet or GetDataReader method.
  ''' </summary>
  Public Enum WhereFilters
    ''' <summary>
    ''' No WhereFilter Selected
    ''' </summary>
    None
    ''' <summary>
    ''' A Custom WhereFilter
    ''' </summary>
    Custom
    ''' <summary>
    ''' 'barcode' WhereFilter
    ''' </summary>
    barcode
    ''' <summary>
    ''' 'Likebarcode' WhereFilter
    ''' </summary>
    Likebarcode
    ''' <summary>
    ''' 'postmp_hdrid' WhereFilter
    ''' </summary>
    postmp_hdrid
    ''' <summary>
    ''' 'PrimaryKey' WhereFilter
    ''' </summary>
    PrimaryKey
    ''' <summary>
    ''' 'stckid' WhereFilter
    ''' </summary>
    stckid
    ''' <summary>
    ''' 'forRefunds' WhereFilter
    ''' </summary>
    forRefunds
  End Enum

  ''' <summary>
  ''' Enumeration for selecting an ORDER BY statement when calling the Load, GetDataSet or GetDataReader method.
  ''' </summary>
  Public Enum OrderByFilters
    ''' <summary>
    ''' No OrderByFilter Selected
    ''' </summary>
    None
    ''' <summary>
    ''' A Custom OrderByFilter
    ''' </summary>
    Custom
    ''' <summary>
    ''' 'barcode' OrderByFilter
    ''' </summary>
    barcode
  End Enum

  ''' <summary>
  ''' Enumeration for selecting an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
  ''' </summary>
  Public Enum InsertFilters
    ''' <summary>
    ''' 'All' InsertFilter
    ''' </summary>
    All
    ''' <summary>
    ''' A Custom InsertFilter
    ''' </summary>
    Custom
  End Enum

  ''' <summary>
  ''' Enumeration for selecting an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
  ''' </summary>
  Public Enum UpdateFilters
    ''' <summary>
    ''' 'PrimaryKey' UpdateFilter
    ''' </summary>
    PrimaryKey
    ''' <summary>
    ''' A Custom UpdateFilter
    ''' </summary>
    Custom
  End Enum

  ''' <summary>
  ''' Enumeration for selecting a DELETE statement or DELETE stored procedure to execute when calling the Delete() method.
  ''' </summary>
  Public Enum DeleteFilters
    ''' <summary>
    ''' 'All' DeleteFilter
    ''' </summary>
    All
    ''' <summary>
    ''' 'DeleteByPK' DeleteFilter
    ''' </summary>
    DeleteByPK
    ''' <summary>
    ''' A Custom DeleteFilter
    ''' </summary>
    Custom
  End Enum

  ''' <summary>
  ''' Enumeration for selecting a Row Count statement or Row Count stored procedure to execute when calling the RowCount() method.
  ''' </summary>
  Public Enum RowCountFilters
    ''' <summary>
    ''' 'All' RowCountFilter
    ''' </summary>
    All
    ''' <summary>
    ''' S Custom RowCountFilter
    ''' </summary>
    Custom
  End Enum
#End Region

#Region "Public Entity Property"
  ''' <summary>
  ''' Get/Set the Entity class that will be used to get and set properties/fields for this data class.
  ''' </summary>
  Public Property Entity() As pos_det
    Get
      Return _Entity
    End Get
    Set(ByVal value As pos_det)
      _Entity = value
      MyBase.EntityObject = _Entity
    End Set
  End Property

  ''' <summary>
  ''' Get/Set a Dynamic SQL or Stored Procedure to execute to return data.
  ''' </summary>
  Public Property SelectFilter() As SelectFilters
    Get
      Return _SelectFilter
    End Get
    Set(ByVal Value As SelectFilters)
      _SelectFilter = Value
    End Set
  End Property

  ''' <summary>
  ''' Get/Set a WHERE clause to be used with a SELECT statement when using Dynamic SQL.
  ''' </summary>
  Public Property WhereFilter() As WhereFilters
    Get
      Return _WhereFilter
    End Get
    Set(ByVal Value As WhereFilters)
      _WhereFilter = Value
    End Set
  End Property

  ''' <summary>
  ''' Get/Set a ORDER BY clause to be used with a SELECT statement when using Dynamic SQL.
  ''' </summary>
  Public Property OrderByFilter() As OrderByFilters
    Get
      Return _OrderByFilter
    End Get
    Set(ByVal Value As OrderByFilters)
      _OrderByFilter = Value
    End Set
  End Property

  ''' <summary>
  ''' Get/Set an INSERT statement or INSERT stored procedure to execute when calling the Insert() method.
  ''' </summary>
  Public Property InsertFilter() As InsertFilters
    Get
      Return _InsertFilter
    End Get
    Set(ByVal Value As InsertFilters)
      _InsertFilter = Value
    End Set
  End Property

  ''' <summary>
  ''' Get/Set an UPDATE statement or UPDATE stored procedure to execute when calling the Update() method.
  ''' </summary>
  Public Property UpdateFilter() As UpdateFilters
    Get
      Return _UpdateFilter
    End Get
    Set(ByVal Value As UpdateFilters)
      _UpdateFilter = Value
      If _UpdateFilter = UpdateFilters.Custom Then
        PerformValidation = False
      End If
    End Set
  End Property

  ''' <summary>
  ''' Get/Set a DELETE statement or DELETE stored procedure to execute when calling the Delete() method. You might need to set a WhereFilter as well.
  ''' </summary>
  Public Property DeleteFilter() As DeleteFilters
    Get
      Return _DeleteFilter
    End Get
    Set(ByVal Value As DeleteFilters)
      _DeleteFilter = Value
    End Set
  End Property

  ''' <summary>
  ''' Get/Set a Row Count statement or RowCount stored procedure to execute when calling the RowCount() method. You might need to set a WhereFilter as well.
  ''' </summary>
  Public Property RowCountFilter() As RowCountFilters
    Get
      Return _RowCountFilter
    End Get
    Set(ByVal Value As RowCountFilters)
      _RowCountFilter = Value
    End Set
  End Property
#End Region

#Region "Init Method"
  ''' <summary>
  ''' Initializes this class to a valid start state.
  ''' </summary>
  Protected Overrides Sub Init()
    ClassName = "pos_detData"
    DBObjectName = "pos_det"
    SchemaName = "dbo"
    PrimaryKeyType = PDSAPrimaryKeyType.SQLIdentity
    PrimaryKeyGenerate = False
    UseAuditTracking = DataProvider.UseDBAuditTracking
    UseStoredProcs = DataProvider.UseStoredProcedures

    MyBase.EntityObject = Entity
    MyBase.ValidatorObject = ValidatorObject

    ' Set Reference to ValidatorObject Properties Collection
    AllColumns = ValidatorObject.Properties

    ' Create Data Columns
    InitDataColumns()
  End Sub
#End Region

#Region "InitDataColumns Method"
  ''' <summary>
  ''' Initializes all of the Data Columns with valid data for each field in the table.
  ''' </summary>
  Protected Overrides Sub InitDataColumns()
    Dim prop As PDSAProperty

    ' Fill in Column Properties
    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detid)
    prop.IsInsertable = False
    prop.IsUpdatable = False
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.postmphdrid)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.stckid)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.barcode)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlChars.Null
    prop.ValueForNull = String.Empty

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.itemdesc)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlChars.Null
    prop.ValueForNull = String.Empty

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.cost)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.price)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.pck)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlDouble.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.quantity)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlDouble.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detamnt)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detdisc)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.psted)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlBoolean.Null
    prop.ValueForNull = Nothing

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detcost)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.pckqty)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.ws)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.qty)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlDouble.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.sInsertid)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlChars.Null
    prop.ValueForNull = String.Empty

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.dtInsertdt)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null
    prop.ValueForNull = Convert.ToDateTime("1/1/1753", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat)

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.sLastUpdateid)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlChars.Null
    prop.ValueForNull = String.Empty

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.dtLastUpdatedt)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlDateTime.Null
    prop.ValueForNull = Convert.ToDateTime("1/1/1753", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat)

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.iConcurrencyid)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlInt16.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.wtid)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlInt32.Null
    prop.ValueForNull = 0

    prop = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.incentive)
    prop.IsInsertable = True
    prop.IsUpdatable = True
    prop.IncludeInAuditTracking = True
    prop.DBValueForNull = System.Data.SqlTypes.SqlMoney.Null
    prop.ValueForNull = 0

  End Sub
#End Region

#Region "EntityDataToColumnCollection Method"
  ''' <summary>
  ''' Moves the data from the Entity class into the Columns collection
  ''' This is called prior to performing a Business Rule Check, an INSERT, UPDATE or DELETE
  ''' </summary>
  Protected Overrides Sub EntityDataToColumnCollection()
    ' Move all Entity Values into Properties Collection
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detid).Value = Entity.detid
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.postmphdrid).Value = Entity.postmphdrid
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.stckid).Value = Entity.stckid
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.barcode).Value = Entity.barcode
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.itemdesc).Value = Entity.itemdesc
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.cost).Value = Entity.cost
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.price).Value = Entity.price
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.pck).Value = Entity.pck
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.quantity).Value = Entity.quantity
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detamnt).Value = Entity.detamnt
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detdisc).Value = Entity.detdisc
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.psted).Value = Entity.psted
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detcost).Value = Entity.detcost
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.pckqty).Value = Entity.pckqty
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.ws).Value = Entity.ws
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.qty).Value = Entity.qty
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.sInsertid).Value = Entity.sInsertid
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.dtInsertdt).Value = Entity.dtInsertdt
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.sLastUpdateid).Value = Entity.sLastUpdateid
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.dtLastUpdatedt).Value = Entity.dtLastUpdatedt
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.iConcurrencyid).Value = Entity.iConcurrencyid
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.wtid).Value = Entity.wtid
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.incentive).Value = Entity.incentive
  End Sub
#End Region

#Region "ColumnCollectionToEntityData Method"
  ''' <summary>
  ''' Moves the data from the Columns collection into the Entity class.
  ''' This is called whenever you are reading data in from a database.
  ''' </summary>
  Protected Overrides Sub ColumnCollectionToEntityData()
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detid).IsNull = False Then
      Entity.detid = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detid).GetAsInteger()
    Else
      Entity.detid = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.postmphdrid).IsNull = False Then
      Entity.postmphdrid = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.postmphdrid).GetAsInteger()
    Else
      Entity.postmphdrid = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.stckid).IsNull = False Then
      Entity.stckid = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.stckid).GetAsInteger()
    Else
      Entity.stckid = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.barcode).IsNull = False Then
      Entity.barcode = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.barcode).GetAsString()
    Else
      Entity.barcode = String.Empty
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.itemdesc).IsNull = False Then
      Entity.itemdesc = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.itemdesc).GetAsString()
    Else
      Entity.itemdesc = String.Empty
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.cost).IsNull = False Then
      Entity.cost = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.cost).GetAsDecimal()
    Else
      Entity.cost = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.price).IsNull = False Then
      Entity.price = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.price).GetAsDecimal()
    Else
      Entity.price = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.pck).IsNull = False Then
      Entity.pck = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.pck).GetAsDouble()
    Else
      Entity.pck = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.quantity).IsNull = False Then
      Entity.quantity = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.quantity).GetAsDouble()
    Else
      Entity.quantity = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detamnt).IsNull = False Then
      Entity.detamnt = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detamnt).GetAsDecimal()
    Else
      Entity.detamnt = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detdisc).IsNull = False Then
      Entity.detdisc = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detdisc).GetAsDecimal()
    Else
      Entity.detdisc = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.psted).IsNull = False Then
      Entity.psted = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.psted).GetValueAsBoolean()
    Else
      Entity.psted = Nothing
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detcost).IsNull = False Then
      Entity.detcost = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detcost).GetAsDecimal()
    Else
      Entity.detcost = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.pckqty).IsNull = False Then
      Entity.pckqty = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.pckqty).GetAsInteger()
    Else
      Entity.pckqty = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.ws).IsNull = False Then
      Entity.ws = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.ws).GetAsDecimal()
    Else
      Entity.ws = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.qty).IsNull = False Then
      Entity.qty = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.qty).GetAsDouble()
    Else
      Entity.qty = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.sInsertid).IsNull = False Then
      Entity.sInsertid = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.sInsertid).GetAsString()
    Else
      Entity.sInsertid = String.Empty
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.dtInsertdt).IsNull = False Then
      Entity.dtInsertdt = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.dtInsertdt).GetAsDate()
    Else
      Entity.dtInsertdt = Convert.ToDateTime("1/1/1753", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat)
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.sLastUpdateid).IsNull = False Then
      Entity.sLastUpdateid = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.sLastUpdateid).GetAsString()
    Else
      Entity.sLastUpdateid = String.Empty
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.dtLastUpdatedt).IsNull = False Then
      Entity.dtLastUpdatedt = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.dtLastUpdatedt).GetAsDate()
    Else
      Entity.dtLastUpdatedt = Convert.ToDateTime("1/1/1753", System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat)
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.iConcurrencyid).IsNull = False Then
      Entity.iConcurrencyid = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.iConcurrencyid).GetAsShort()
    Else
      Entity.iConcurrencyid = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.wtid).IsNull = False Then
      Entity.wtid = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.wtid).GetAsInteger()
    Else
      Entity.wtid = 0
    End If
    
    If ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.incentive).IsNull = False Then
      Entity.incentive = ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.incentive).GetAsDecimal()
    Else
      Entity.incentive = 0
    End If
    
  End Sub
#End Region

#Region "CreateEntityFromDataRow Method"
  ''' <summary>
  ''' Creates an Entity object from a DataRow object.
  ''' </summary>
  ''' <param name="dr">DataRow object with all fields from the table in it.</param>
  ''' <returns>pos_det</returns>
  Public Function CreateEntityFromDataRow(ByVal dr As DataRow) As pos_det
    ' Create new Entity Object
    Entity = New pos_det()

    ' Move all data into Properties collection
    ' This method calls the ColumnCollectionToEntityData method
    DataRowToProperties(dr)
    Entity.IsDirty = False

    Return Entity
  End Function
#End Region

#Region "SelectSQL Method"
  ''' <summary>
  ''' Builds the SQL for the SELECT statement, or SELECT stored procedure based on the SelectFilter property.
  ''' </summary>
  ''' <returns>string</returns>
  Public Overrides Function SelectSQL() As String
    Dim sb As StringBuilder = New StringBuilder(SB_INIT_LENGTH)

    Select Case SelectFilter
      Case SelectFilters.All
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" SELECT det_id, postmp_hdrid, stckid, barcode, item_desc, cost, price, pck, quantity, det_amnt, det_disc, psted, det_cost, pck_qty, ws, qty, sInsert_id, dtInsert_dt, sLastUpdate_id, dtLastUpdate_dt, iConcurrency_id, wtid, incentive FROM dbo.pos_det")

        End If
      Case SelectFilters.ListBox
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" SELECT det_id, barcode FROM dbo.pos_det")

        End If
      Case SelectFilters.PrimaryKey
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" SELECT det_id, postmp_hdrid, stckid, barcode, item_desc, cost, price, pck, quantity, det_amnt, det_disc, psted, det_cost, pck_qty, ws, qty, sInsert_id, dtInsert_dt, sLastUpdate_id, dtLastUpdate_dt, iConcurrency_id, wtid, incentive FROM dbo.pos_det WHERE det_id = @detid")

        End If
      Case SelectFilters.refunds
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" SELECT ")
sb.Append(" det_id, postmp_hdrid, price, qty, det_amnt, det_disc, sInsert_id, dtInsert_dt ")
sb.Append(" FROM dbo.pos_det")

        End If

      Case SelectFilters.Custom
        sb.Append(SelectCustom)

    End Select

    SQL = sb.ToString()

    Return SQL
  End Function
#End Region

#Region "InsertSQL Method"
  ''' <summary>
  ''' Builds the SQL for the INSERT statement, or INSERT stored procedure based on the InsertFilter property.
  ''' </summary>
  ''' <returns>string</returns>
  Public Overrides Function InsertSQL() As String
    Dim sb As StringBuilder = New StringBuilder(SB_INIT_LENGTH)

    Select Case InsertFilter
      Case InsertFilters.All
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" INSERT INTO dbo.pos_det ( postmp_hdrid, stckid, barcode, item_desc, cost, price, pck, quantity, det_amnt, det_disc, psted, det_cost, pck_qty, ws, qty, sInsert_id, dtInsert_dt, sLastUpdate_id, dtLastUpdate_dt, iConcurrency_id, wtid, incentive ) VALUES ( @postmphdrid, @stckid, @barcode, @itemdesc, @cost, @price, @pck, @quantity, @detamnt, @detdisc, @psted, @detcost, @pckqty, @ws, @qty, @sInsertid, @dtInsertdt, @sLastUpdateid, @dtLastUpdatedt, @iConcurrencyid, @wtid, @incentive )")

        End If

      Case InsertFilters.Custom
        sb.Append(InsertCustom)
    End Select

    SQL = sb.ToString()

    Return SQL
  End Function
#End Region

#Region "UpdateSQL Method"
  ''' <summary>
  ''' Builds the SQL for the UPDATE statement, or UPDATE stored procedure based on the UpdateFilter property.
  ''' </summary>
  ''' <returns>string</returns>
  Public Overrides Function UpdateSQL() As String
    Dim sb As StringBuilder = New StringBuilder(SB_INIT_LENGTH)

    Select Case UpdateFilter
      Case UpdateFilters.PrimaryKey
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" UPDATE dbo.pos_det SET postmp_hdrid = @postmphdrid, stckid = @stckid, barcode = @barcode, item_desc = @itemdesc, cost = @cost, price = @price, pck = @pck, quantity = @quantity, det_amnt = @detamnt, det_disc = @detdisc, psted = @psted, det_cost = @detcost, pck_qty = @pckqty, ws = @ws, qty = @qty, sInsert_id = @sInsertid, dtInsert_dt = @dtInsertdt, sLastUpdate_id = @sLastUpdateid, dtLastUpdate_dt = @dtLastUpdatedt, iConcurrency_id = @iConcurrencyid, wtid = @wtid, incentive = @incentive WHERE det_id = @detid")

        End If

      Case UpdateFilters.Custom
        sb.Append(UpdateCustom)

    End Select

    SQL = sb.ToString()

    Return SQL
  End Function
#End Region

#Region "DeleteByPK Method"
  ''' <summary>
  ''' Delete a record from the table based on the primary key value that is passed in.
  ''' </summary>
  ''' <param name="detid">The value of the primary key of the row to delete</param>
  ''' <returns>int</returns>
  Public Function DeleteByPK(ByVal detid As Integer) As Integer
    DeleteFilter = DeleteFilters.DeleteByPK
    Entity.detid = detid

    ' If using Audit Tracking, need to load the record first
    If UseAuditTracking Then
      LoadByPK(detid)
    End If

    ' Set WhereFilter to None, because it got set in LoadByPK
    WhereFilter = WhereFilters.None
    RowsAffected = Delete()

    Return RowsAffected
  End Function
#End Region

#Region "DeleteSQL Method"
  ''' <summary>
  ''' Builds the SQL for the DELETE statement, or DELETE stored procedure. You can set the WhereFilter property to selectively delete rows from the table.
  ''' </summary>
  ''' <returns>string</returns>
  Public Overrides Function DeleteSQL() As String
    Dim sb As StringBuilder = New StringBuilder(SB_INIT_LENGTH)

    Select Case DeleteFilter
      Case DeleteFilters.All
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" DELETE FROM dbo.pos_det")

        End If
      Case DeleteFilters.DeleteByPK
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" DELETE FROM dbo.pos_det WHERE det_id = @detid")

        End If

      Case DeleteFilters.Custom
        sb.Append(DeleteCustom)

    End Select

    If UseStoredProcs = False Then
      sb.Append(WhereClauseSQL())
    End If

    SQL = sb.ToString()

    Return SQL
  End Function
#End Region

#Region "RowCountSQL Method"
  ''' <summary>
  ''' Builds the SELECT Count(*) SQL, or the name of the stored procedure, that will count the number of rows.
  ''' </summary>
  ''' <returns>string</returns>
  Public Overrides Function RowCountSQL() As String
    Dim sb As StringBuilder = New StringBuilder(SB_INIT_LENGTH)

    Select Case RowCountFilter
      Case RowCountFilters.All
        If UseStoredProcs Then
          sb.Append("")
        Else
            sb.Append(" SELECT Count(*) As NumRecs FROM dbo.pos_det")

        End If

      Case RowCountFilters.Custom
        sb.Append(RowCountCustom)

    End Select

    If UseStoredProcs = False Then
      sb.Append(WhereClauseSQL())
    End If

    SQL = sb.ToString()

    Return SQL
  End Function
#End Region

#Region "LoadByPK Method"
  ''' <summary>
  ''' Load a row of data in the Entity properties
  ''' </summary>
  ''' <param name="detid">The value of the primary key of the row to load</param>
  ''' <returns>Int32</returns>
  Public Function LoadByPK(ByVal detid As Integer) As Integer
    SelectFilter = SelectFilters.PrimaryKey
    Entity.detid = detid

    ' Load data into Properties
    RowsAffected = Load()

    ' Reset all Collection Properties
    ResetCollectionProperties()

    Return RowsAffected
  End Function
#End Region

#Region "WhereClauseSQL Method"
  ''' <summary>
  ''' Builds the WHERE clause to be used in combination with a SELECT statement.
  ''' </summary>
  ''' <returns>string</returns>
  Public Overrides Function WhereClauseSQL() As String
    Dim sb As StringBuilder = New StringBuilder(SB_INIT_LENGTH)

    Select Case WhereFilter
      Case WhereFilters.Custom
        sb.Append(WhereCustom)

      Case WhereFilters.None
        ' Do nothing

      Case WhereFilters.barcode
        sb.Append(" WHERE barcode = @barcode")
          
      Case WhereFilters.Likebarcode
        sb.Append(" WHERE barcode LIKE @barcode")
          
      Case WhereFilters.postmp_hdrid
        sb.Append(" WHERE postmp_hdrid = @postmphdrid")
          
      Case WhereFilters.PrimaryKey
        sb.Append(" WHERE det_id = @detid")
          
      Case WhereFilters.stckid
        sb.Append(" WHERE stckid = @stckid")
          
      Case WhereFilters.forRefunds
        sb.Append(" WHERE dtInsert_dt  >=  @dtInsert_dt")
          
    End Select

    Return sb.ToString()
  End Function
#End Region

#Region "WhereClauseFillInParameters Method"
  ''' <summary>
  ''' Builds the CommandObject.Parameters collection for any WHERE clause parameters.
  ''' </summary>
  Protected Overrides Sub WhereClauseFillInParameters()
    Select Case WhereFilter
      Case WhereFilters.barcode
        CommandObject.Parameters.Add(DataProvider.CreateParameter("barcode", DbType.String, Entity.barcode))
      Case WhereFilters.Likebarcode
        CommandObject.Parameters.Add(DataProvider.CreateParameter("barcode", DbType.String, Entity.barcode))
      Case WhereFilters.postmp_hdrid
        CommandObject.Parameters.Add(DataProvider.CreateParameter("postmphdrid", DbType.Int32, Entity.postmphdrid))
      Case WhereFilters.PrimaryKey
        CommandObject.Parameters.Add(DataProvider.CreateParameter("detid", DbType.Int32, Entity.detid))
      Case WhereFilters.stckid
        CommandObject.Parameters.Add(DataProvider.CreateParameter("stckid", DbType.Int32, Entity.stckid))
      Case WhereFilters.forRefunds
        CommandObject.Parameters.Add(DataProvider.CreateParameter("dtInsertdt", DbType.Date, Entity.dtInsertdt))
      
      

    End Select
  End Sub
#End Region

#Region "OrderByClauseSQL Method"
  ''' <summary>
  ''' Builds the ORDER BY clause to be used in combination with a SELECT statement.
  ''' </summary>
  ''' <returns>string</returns>
  Public Overrides Function OrderByClauseSQL() As String
    Dim sb As StringBuilder = New StringBuilder(SB_INIT_LENGTH)

    Select Case OrderByFilter
      Case OrderByFilters.None
        '  Do Nothing

      Case OrderByFilters.Custom
        sb.Append(OrderByCustom)

      Case OrderByFilters.barcode
          sb.Append(" ORDER BY barcode")


    End Select

    Return sb.ToString()
  End Function
#End Region

#Region "SelectFillInParameters Method"
  ''' <summary>
  ''' Builds the CommandObject.Parameters collection for any SELECT statement parameters.
  ''' </summary>
  Protected Overrides Sub SelectFillInParameters()
    Select Case SelectFilter
      Case SelectFilters.All
      
      Case SelectFilters.ListBox
      
      Case SelectFilters.PrimaryKey
        CommandObject.Parameters.Add(DataProvider.CreateParameter("@detid", DbType.Int32, Entity.detid))
      
      Case SelectFilters.refunds
      
  
    End Select
  End Sub
#End Region

#Region "PrimaryKeySet Method"
  ''' <summary>
  ''' Sets the primary key field in the Entity and in the Data Columns Collection.
  ''' </summary>
  ''' <param name="detid">The value of the primary key to set</param>
  Public Overrides Sub PrimaryKeySet(ByVal detid As Integer)
    ' Fill in Entity Values
    Entity.detid = detid
    ' Fill in Columns Collection
    ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detid).Value = detid
  End Sub
#End Region

#Region "SetModificationCommandParameters Method"
  ''' <summary>
  ''' Called to build any parameters prior to submitting an INSERT, UPDATE, DELETE statement.
  ''' </summary>
  Protected Overrides Sub SetModificationCommandParameters()
    Select Case DataModificationAction
      Case PDSADataModificationState.Delete
        Select Case DeleteFilter
        
          Case DeleteFilters.All
            CommandObject.Parameters.Clear()
          Case DeleteFilters.DeleteByPK
            CommandObject.Parameters.Clear()
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@detid", DbType.Int32, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detid).Value))
          
        End Select        
        If Me.WhereFilter <> WhereFilters.None Then
          WhereClauseFillInParameters()
        End If
      
      Case PDSADataModificationState.Insert
        If PrimaryKeyType = PDSAPrimaryKeyType.PDSA Then
          If PrimaryKeyGenerate = True Then
            '  Get New Primary Key from pdsaTableIds
            PrimaryKeySet(PKGetFromPDSATableIds(PDSALoginName))
          End If
        End If

        ' Clear any Where Filter when doing an INSERT
        Me.WhereFilter = WhereFilters.None

        Select Case InsertFilter
          Case InsertFilters.All
            CommandObject.Parameters.Clear()
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@postmphdrid", DbType.Int32, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.postmphdrid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@stckid", DbType.Int32, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.stckid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@barcode", DbType.String, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.barcode).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@itemdesc", DbType.String, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.itemdesc).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@cost", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.cost).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@price", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.price).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@pck", DbType.Double, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.pck).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@quantity", DbType.Double, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.quantity).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@detamnt", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detamnt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@detdisc", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detdisc).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@psted", DbType.Boolean, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.psted).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@detcost", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detcost).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@pckqty", DbType.Int32, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.pckqty).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@ws", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.ws).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@qty", DbType.Double, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.qty).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@sInsertid", DbType.String, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.sInsertid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@dtInsertdt", DbType.Date, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.dtInsertdt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@sLastUpdateid", DbType.String, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.sLastUpdateid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@dtLastUpdatedt", DbType.Date, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.dtLastUpdatedt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@iConcurrencyid", DbType.Int16, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.iConcurrencyid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@wtid", DbType.Int32, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.wtid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@incentive", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.incentive).Value))

        End Select

      Case PDSADataModificationState.Update
        Select Case UpdateFilter
          Case UpdateFilters.PrimaryKey
            CommandObject.Parameters.Clear()
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@postmphdrid", DbType.Int32, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.postmphdrid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@stckid", DbType.Int32, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.stckid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@barcode", DbType.String, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.barcode).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@itemdesc", DbType.String, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.itemdesc).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@cost", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.cost).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@price", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.price).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@pck", DbType.Double, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.pck).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@quantity", DbType.Double, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.quantity).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@detamnt", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detamnt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@detdisc", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detdisc).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@psted", DbType.Boolean, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.psted).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@detcost", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detcost).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@pckqty", DbType.Int32, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.pckqty).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@ws", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.ws).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@qty", DbType.Double, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.qty).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@sInsertid", DbType.String, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.sInsertid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@dtInsertdt", DbType.Date, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.dtInsertdt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@sLastUpdateid", DbType.String, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.sLastUpdateid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@dtLastUpdatedt", DbType.Date, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.dtLastUpdatedt).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@iConcurrencyid", DbType.Int16, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.iConcurrencyid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@wtid", DbType.Int32, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.wtid).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@incentive", DbType.Decimal, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.incentive).Value))
            CommandObject.Parameters.Add(DataProvider.CreateParameter("@detid", DbType.Int32, ValidatorObject.Properties.GetByName(pos_detValidator.ColumnNames.detid).Value))

        End Select
    End Select
  End Sub
#End Region
End Class
